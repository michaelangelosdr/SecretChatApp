// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cmd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pbcmd {

  /// <summary>Holder for reflection information generated from cmd.proto</summary>
  public static partial class CmdReflection {

    #region Descriptor
    /// <summary>File descriptor for cmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgljbWQucHJvdG8SBXBiY21kInEKCFBCSGVhZGVyEg8KB21haW5DbWQYASAC",
            "KA0SDgoGc3ViQ21kGAIgAigNEg8KB2VuY3J5cHQYAyABKA0SEQoJY2xpZW50",
            "Q3R4GAQgASgNEiAKA2lkeBgFIAEoCzITLnBiY21kLlBCTWF0Y2hJbmRleCJb",
            "CgxQQk1hdGNoSW5kZXgSDQoFc3ZySUQYASACKA0SDwoHbWF0Y2hJRBgCIAIo",
            "DRIQCghnYW1lVHlwZRgDIAEoDRIMCgRraW5kGAQgASgNEgsKA3RpZBgFIAEo",
            "DSKcAQoLUEJDb21tUGFyYW0SCwoDY2lkGAEgAigNEgsKA3VpZBgCIAIoDRIN",
            "CgV0b2tlbhgDIAIoCRIPCgd2ZXJzaW9uGAQgAigJEg8KB2NoYW5uZWwYBSAB",
            "KA0SDAoEbGFuZxgGIAEoDRIjCgZkZXZpY2UYByABKAsyEy5wYmNtZC5QQkRl",
            "dmljZUluZm8SDwoHcGtnTmFtZRgIIAEoCSJ1CgxQQkRldmljZUluZm8SDwoH",
            "bmV0d29yaxgBIAEoCRIOCgZvc1R5cGUYAiABKAkSEQoJb3NWZXJzaW9uGAMg",
            "ASgJEhIKCmRldmljZVR5cGUYBCABKAkSDAoEaW1laRgFIAEoCRIPCgdtYWNB",
            "ZGRyGAYgASgJIioKDFBCQ29tbVJlc3VsdBIMCgRjb2RlGAEgAigFEgwKBGRl",
            "c2MYAiABKAkiHwoKUEJIZWFyQmVhdBIRCgl0aW1lc3RhbXAYASACKAQiaAoR",
            "UEJTZXJ2aWNlTm90Rm91bmQSDwoHc3ZyVHlwZRgBIAIoDRIRCgljbGllbnRD",
            "dHgYAiACKA0SDwoHbWFpbkNtZBgDIAEoDRIOCgZzdWJDbWQYBCABKA0SDgoG",
            "cmVhc29uGAUgASgNKocECglQQk1haW5DbWQSEgoOTUNtZF9IZWFydEJlYXQQ",
            "ABIQCgxNQ21kX0FjY291bnQQARIOCgpNQ21kX0d1ZXNzEAISDgoKTUNtZF9U",
            "ZXhhcxADEhIKDk1DbWRfTWF0Y2hMaXN0EAQSDQoJTUNtZF9DbHViEAUSEAoM",
            "TUNtZF9HYW1lbG9nEAYSDgoKTUNtZF9XZWlibxAHEg0KCU1DbWRfUmFuaxAI",
            "Eg0KCU1DbWRfTWFsbBAJEg4KCk1DbWRfUHJvbW8QChIVChFNQ21kX05vdGlm",
            "aWNhdGlvbhALEhEKDU1DbWRfSHVuVGV4YXMQDBIOCgpNQ21kX1Nob3J0EA4S",
            "DgoKTUNtZF9BZ2VudBAPEgwKCE1DbWRfUGF5EBASDAoITUNtZF9QS1QQERIO",
            "CgpNQ21kX1Bva2VyEBISEAoMTUNtZF9DbHViTmV3EBMSDQoJTUNtZF9DaGF0",
            "EBQSDgoKTUNtZF9VbmlvbhAVEhEKDU1DbWRfTWF0Y2hNZ3IQFhISCg5NQ21k",
            "X0x1Y2t5Q2FyZBAXEhAKDE1DbWRfUHJvZmlsZRAYEhUKEU1DbWRfTHVja3lD",
            "YXJkUGtjEBkSEAoLTUNtZF9BY2Nlc3MQgSASDwoKTUNtZF9TdGF0ZRCCIBIT",
            "Cg5NQ21kX1N0YXRpc3RpYxCDIBISCgxNQ21kX01vbml0b3IQgcADKjgKGFBC",
            "TWFpbkNtZEhlYXJ0QmVhdFN1YkNtZBILCgdIQl9TZW5kEAESDwoLSEJfUmVz",
            "cG9uc2UQAipbChVQQk1haW5DbWRBY2Nlc3NTdWJDbWQSEwoPU2VydmljZU5v",
            "dEZvdW5kEAESFQoQQWNjZXNzX1JlcUxvZ291dBCBIBIWChFBY2Nlc3NfUmVz",
            "cExvZ291dBCCICrbHQoWUEJNYWluQ21kQWNjb3VudFN1YkNtZBIUChBBY2Nv",
            "dW50X1JlcUxvZ2luEAESFQoRQWNjb3VudF9SZXNwTG9naW4QAhITCg9BY2Nv",
            "dW50X1JlcUluZm8QAxIUChBBY2NvdW50X1Jlc3BJbmZvEAQSGQoVQWNjb3Vu",
            "dF9SZXFNb2RpZnlJbmZvEAUSGgoWQWNjb3VudF9SZXNwTW9kaWZ5SW5mbxAG",
            "EigKJEFjY291bnRfUmVxQWNjb3VudElzQ2hhcmdlQ2hhbmdlTmFtZRB1EikK",
            "JUFjY291bnRfUmVzcEFjY291bnRJc0NoYXJnZUNoYW5nZU5hbWUQdhIZChVB",
            "Y2NvdW50X1JlcU1vYmlsZUNvZGUQBxIaChZBY2NvdW50X1Jlc3BNb2JpbGVD",
            "b2RlEAgSGQoVQWNjb3VudF9SZXFNb2JpbGVBdXRoEAkSGgoWQWNjb3VudF9S",
            "ZXNwTW9iaWxlQXV0aBAKEhoKFkFjY291bnRfUmVxTW9iaWxlUmVwd2QQCxIb",
            "ChdBY2NvdW50X1Jlc3BNb2JpbGVSZXB3ZBAMEh8KG0FjY291bnRfUmVxQWNj",
            "b3VudENoZWNrQ29kZRBzEiAKHEFjY291bnRfUmVzcEFjY291bnRDaGVja0Nv",
            "ZGUQdBIZChVBY2NvdW50X1JlcVdlaXhpbkF1dGgQDRIaChZBY2NvdW50X1Jl",
            "c3BXZWl4aW5BdXRoEA4SGwoXQWNjb3VudF9SZXFNb2JpbGVTZWNyZXQQDxIc",
            "ChhBY2NvdW50X1Jlc3BNb2JpbGVTZWNyZXQQEBIUChBBY2NvdW50X1JlcU1v",
            "bmV5EBESFQoRQWNjb3VudF9SZXNwTW9uZXkQEhIXChNBY2NvdW50X1JlcU9z",
            "c1BhcmFtEBMSGAoUQWNjb3VudF9SZXNwT3NzUGFyYW0QFBIYChRBY2NvdW50",
            "X1JlcVVzZXJQcm9wcxAVEhkKFUFjY291bnRfUmVzcFVzZXJQcm9wcxAWEh0K",
            "GUFjY291bnRfUmVxU2V0RGV2aWNlVG9rZW4QFxIeChpBY2NvdW50X1Jlc3BT",
            "ZXREZXZpY2VUb2tlbhAYEhcKE0FjY291bnRfUmVxRmVlZGJhY2sQGRIYChRB",
            "Y2NvdW50X1Jlc3BGZWVkYmFjaxAaEhoKFkFjY291bnRfUmVxU2V0TG9jYXRp",
            "b24QGxIbChdBY2NvdW50X1Jlc3BTZXRMb2NhdGlvbhAcEhkKFUFjY291bnRf",
            "UmVxR2V0QXZjU2lnbhAdEhoKFkFjY291bnRfUmVzcEdldEF2Y1NpZ24QHhIX",
            "ChNBY2NvdW50X1JlcVByZWxvZ2luEB8SGAoUQWNjb3VudF9SZXNwUHJlbG9n",
            "aW4QIBIYChRBY2NvdW50X1JlcUJsYWNrTGlzdBAhEhkKFUFjY291bnRfUmVz",
            "cEJsYWNrTGlzdBAiEhgKFEFjY291bnRfUmVxQmxhY2tFZGl0ECMSGQoVQWNj",
            "b3VudF9SZXNwQmxhY2tFZGl0ECQSGQoVQWNjb3VudF9SZXFCbGFja0NvdW50",
            "ECUSGgoWQWNjb3VudF9SZXNwQmxhY2tDb3VudBAmEhkKFUFjY291bnRfUmVx",
            "SHVhd2VpQXV0aBAnEhoKFkFjY291bnRfUmVzcEh1YXdlaUF1dGgQKBIXChNB",
            "Y2NvdW50X1JlcU9wcG9BdXRoECsSGAoUQWNjb3VudF9SZXNwT3Bwb0F1dGgQ",
            "LBIXChNBY2NvdW50X1JlcVZpdm9BdXRoEC0SGAoUQWNjb3VudF9SZXNwVml2",
            "b0F1dGgQLhIZChVBY2NvdW50X1JlcVd4R2FtZUF1dGgQLxIaChZBY2NvdW50",
            "X1Jlc3BXeEdhbWVBdXRoEDASJgoiQWNjb3VudF9SZXFBY2NvdW50VmhrZGFw",
            "aVZoa2RMb2dJbhAxEicKI0FjY291bnRfUmVzcEFjY291bnRWaGtkYXBpVmhr",
            "ZExvZ0luEDISJwojQWNjb3VudF9SZXFBY2NvdW50VmhrZGFwaVZoa2RTZXRQ",
            "aW4QMxIoCiRBY2NvdW50X1Jlc3BBY2NvdW50VmhrZGFwaVZoa2RTZXRQaW4Q",
            "NBIqCiZBY2NvdW50X1JlcUFjY291bnRWaGtkYXBpVmhrZEdldEFzc2V0cxA1",
            "EisKJ0FjY291bnRfUmVzcEFjY291bnRWaGtkYXBpVmhrZEdldEFzc2V0cxA2",
            "EikKJUFjY291bnRfUmVxQWNjb3VudFZoa2RhcGlVcGRhdGVBc3NldHMQNxIq",
            "CiZBY2NvdW50X1Jlc3BBY2NvdW50VmhrZGFwaVVwZGF0ZUFzc2V0cxA4EigK",
            "JEFjY291bnRfUmVxQWNjb3VudFZoa2RhcGlHZXRGbG93TGlzdBA5EikKJUFj",
            "Y291bnRfUmVzcEFjY291bnRWaGtkYXBpR2V0Rmxvd0xpc3QQOhIpCiVBY2Nv",
            "dW50X1JlcUFjY291bnRWaGtkYXBpVmhrZElzSGFzUGluEDsSKgomQWNjb3Vu",
            "dF9SZXNwQWNjb3VudFZoa2RhcGlWaGtkSXNIYXNQaW4QPBIvCitBY2NvdW50",
            "X1JlcUFjY291bnRWaGtkYXBpVmhrZHdlYlZpZXdDb250cm9sED0SMAosQWNj",
            "b3VudF9SZXNwQWNjb3VudFZoa2RhcGlWaGtkd2ViVmlld0NvbnRyb2wQPhI0",
            "CjBBY2NvdW50X1JlcUFjY291bnRWaGtkYXBpRGlnaXRhbE1vbmV5TWFsbENv",
            "bnRyb2wQShI1CjFBY2NvdW50X1Jlc3BBY2NvdW50VmhrZGFwaURpZ2l0YWxN",
            "b25leU1hbGxDb250cm9sEEsSLworQWNjb3VudF9SZXFBY2NvdW50VmhrZGFw",
            "aUdldEJUQ0V4Y2hhbmdlUmF0ZRBBEjAKLEFjY291bnRfUmVzcEFjY291bnRW",
            "aGtkYXBpR2V0QlRDRXhjaGFuZ2VSYXRlEEISJgoiQWNjb3VudF9SZXFBY2Nv",
            "dW50VmhrZGFwaUdldENvbmZpZxBFEicKI0FjY291bnRfUmVzcEFjY291bnRW",
            "aGtkYXBpR2V0Q29uZmlnEEYSJgoiQWNjb3VudF9SZXFBY2NvdW50VmhrZGFw",
            "aUdpdmVNb25leRBJEicKI0FjY291bnRfUmVzcEFjY291bnRWaGtkYXBpR2l2",
            "ZU1vbmV5EFASIgoeQWNjb3VudF9SZXFBY2NvdW50R2V0UmVjb3JkTG9nEFQS",
            "IwofQWNjb3VudF9SZXNwQWNjb3VudEdldFJlY29yZExvZxBVEicKI0FjY291",
            "bnRfUmVxQWNjb3VudFZHUGF5VXBkYXRlQXNzZXRzEFYSKAokQWNjb3VudF9S",
            "ZXNwQWNjb3VudFZHUGF5VXBkYXRlQXNzZXRzEFcSJQohQWNjb3VudF9SZXFB",
            "Y2NvdW50VkdQYXlHZXRBZGRyZXNzEFgSJgoiQWNjb3VudF9SZXNwQWNjb3Vu",
            "dFZHUGF5R2V0QWRkcmVzcxBZEiwKKEFjY291bnRfUmVxQWNjb3VudFZHUGF5",
            "R2V0V2l0aGRyYXdDb25maWcQWhItCilBY2NvdW50X1Jlc3BBY2NvdW50VkdQ",
            "YXlHZXRXaXRoZHJhd0NvbmZpZxBbEi4KKkFjY291bnRfUmVxQWNjb3VudFZH",
            "UGF5QXBwbHlUcmFuc2FjdGlvbk91dBBcEi8KK0FjY291bnRfUmVzcEFjY291",
            "bnRWR1BheUFwcGx5VHJhbnNhY3Rpb25PdXQQXRIyCi5BY2NvdW50X1JlcUFj",
            "Y291bnRWR1BheUdldEFzc2V0c1JlY29yZFBhZ2VMaXN0EF4SMwovQWNjb3Vu",
            "dF9SZXNwQWNjb3VudFZHUGF5R2V0QXNzZXRzUmVjb3JkUGFnZUxpc3QQXxIm",
            "CiJBY2NvdW50X1JlcUFjY291bnRWR1BheVZoa2RUb01vbmV5EHASJwojQWNj",
            "b3VudF9SZXNwQWNjb3VudFZHUGF5VmhrZFRvTW9uZXkQcRIcChhGdHBheV9S",
            "ZXFGdHBheUdldFBheUxpc3QQYBIdChlGdHBheV9SZXNwRnRwYXlHZXRQYXlM",
            "aXN0EGESHgoaRnRwYXlfUmVxRnRwYXlQYXlTdWJtaXRBY3QQYhIfChtGdHBh",
            "eV9SZXNwRnRwYXlQYXlTdWJtaXRBY3QQYxIZChVGdHBheV9SZXFGdHBheUdl",
            "dEJhSWQQZBIaChZGdHBheV9SZXNwRnRwYXlHZXRCYUlkEGUSIAocRnRwYXlf",
            "UmVxRnRwYXlMYXVuY2hXaXRoZHJhdxBmEiEKHUZ0cGF5X1Jlc3BGdHBheUxh",
            "dW5jaFdpdGhkcmF3EGcSHQoZRnRwYXlfUmVxRnRwYXlHZXRGbG93TGlzdBBo",
            "Eh4KGkZ0cGF5X1Jlc3BGdHBheUdldEZsb3dMaXN0EGkSJAogRnRwYXlfUmVx",
            "RnRwYXlHZXRIaXN0b3J5Q2FyZEluZm8QbBIlCiFGdHBheV9SZXNwRnRwYXlH",
            "ZXRIaXN0b3J5Q2FyZEluZm8QbRIZChVGdHBheV9SZXFHZXRQYXlTdGF0dXMQ",
            "bhIaChZGdHBheV9SZXNwR2V0UGF5U3RhdHVzEG8SJgoiRnRwYXlfUmVxRnRw",
            "YXlHZXRMYXVuY2hXaXRoZHJhd0ZlZRB3EicKI0Z0cGF5X1Jlc3BGdHBheUdl",
            "dExhdW5jaFdpdGhkcmF3RmVlEHgSFQoRRnRwYXlfUmVxQ2hlY2tQSU4QahIW",
            "ChJGdHBheV9SZXNwQ2hlY2tQSU4QaxInCiNBY2NvdW50X1JlcUFjY291bnRD",
            "aGVja1Bob25lT3JFbWFpbBBREigKJEFjY291bnRfUmVzcEFjY291bnRDaGVj",
            "a1Bob25lT3JFbWFpbBBSEh4KGUFjY291bnRfUmVxR2V0QXV0b0hlYWRJbWcQ",
            "gAESHwoaQWNjb3VudF9SZXNwR2V0QXV0b0hlYWRJbWcQgQESHwoaQWNjb3Vu",
            "dF9SZXFDaGVja1BheURpc2FibGUQggESIAobQWNjb3VudF9SZXNwQ2hlY2tQ",
            "YXlEaXNhYmxlEIMBEhYKEEFjY291bnRfS2lja1VzZXIQgOADKsoIChRQQk1h",
            "aW5DbWRHdWVzc1N1YkNtZBIRCg1HdWVzc19SZXFMaXN0EAESEgoOR3Vlc3Nf",
            "UmVzcExpc3QQAhIRCg1HdWVzc19SZXFJbmZvEAMSEgoOR3Vlc3NfUmVzcElu",
            "Zm8QBBIRCg1HdWVzc19SZXFNYWtlEAUSEgoOR3Vlc3NfUmVzcE1ha2UQBhIY",
            "ChRHdWVzc19SZXFHdWVzc2VyTGlzdBAHEhkKFUd1ZXNzX1Jlc3BHdWVzc2Vy",
            "TGlzdBAIEhUKEUd1ZXNzX1JlcU5ld3NMaXN0EAkSFgoSR3Vlc3NfUmVzcE5l",
            "d3NMaXN0EAoSGQoVR3Vlc3NfUmVxU3Rhck1hcmtMaXN0EAsSGgoWR3Vlc3Nf",
            "UmVzcFN0YXJNYXJrTGlzdBAMEhMKD0d1ZXNzX1JlcVByYWlzZRANEhQKEEd1",
            "ZXNzX1Jlc3BQcmFpc2UQDhITCg9HdWVzc19SZXFSZXZpZXcQDxIUChBHdWVz",
            "c19SZXNwUmV2aWV3EBASFwoTR3Vlc3NfUmVxUmV2aWV3TGlzdBAREhgKFEd1",
            "ZXNzX1Jlc3BSZXZpZXdMaXN0EBISGQoVR3Vlc3NfUmVxUmVwb3J0UmV2aWV3",
            "EBMSGgoWR3Vlc3NfUmVzcFJlcG9ydFJldmlldxAUEhcKE0d1ZXNzX1JlcVJl",
            "Y29yZExpc3QQFRIYChRHdWVzc19SZXNwUmVjb3JkTGlzdBAWEhcKE0d1ZXNz",
            "X1JlcU5vdGlmeUxpc3QQFxIYChRHdWVzc19SZXNwTm90aWZ5TGlzdBAYEhcK",
            "E0d1ZXNzX1JlcU5vdGlmeVJlYWQQGRIYChRHdWVzc19SZXNwTm90aWZ5UmVh",
            "ZBAaEhUKEUd1ZXNzX1JlcVByYWlzZXJzEBsSFgoSR3Vlc3NfUmVzcFByYWlz",
            "ZXJzEBwSGAoUR3Vlc3NfUmVxTWVzc2FnZUxpc3QQHRIZChVHdWVzc19SZXNw",
            "TWVzc2FnZUxpc3QQHhIYChRHdWVzc19SZXFNZXNzYWdlUmVhZBAfEhkKFUd1",
            "ZXNzX1Jlc3BNZXNzYWdlUmVhZBAgEhEKDUd1ZXNzX1JlcU5ld3MQIRISCg5H",
            "dWVzc19SZXNwTmV3cxAiEhYKEkd1ZXNzX1JlcVBva2VyTGlzdBAjEhcKE0d1",
            "ZXNzX1Jlc3BQb2tlckxpc3QQJBIWChJHdWVzc19SZXFQb2tlck1ha2UQJRIX",
            "ChNHdWVzc19SZXNwUG9rZXJNYWtlECYSHAoYR3Vlc3NfUmVxUG9rZXJSZWNv",
            "cmRMaXN0ECcSHQoZR3Vlc3NfUmVzcFBva2VyUmVjb3JkTGlzdBAoEhwKGEd1",
            "ZXNzX1JlcVBva2VyUmVjb3JkSW5mbxApEh0KGUd1ZXNzX1Jlc3BQb2tlclJl",
            "Y29yZEluZm8QKhIVChFHdWVzc19SZXFJbmZvTGlzdBArEhYKEkd1ZXNzX1Jl",
            "c3BJbmZvTGlzdBAsKtYGChRQQk1haW5DbWRXZWlib1N1YkNtZBIRCg1XZWli",
            "b19SZXFIb21lEAESEgoOV2VpYm9fUmVzcEhvbWUQAhIUChBXZWlib19SZXFQ",
            "cm9maWxlEAMSFQoRV2VpYm9fUmVzcFByb2ZpbGUQBBIUChBXZWlib19SZXFQ",
            "dWJsaXNoEAUSFQoRV2VpYm9fUmVzcFB1Ymxpc2gQBhITCg9XZWlib19SZXFS",
            "ZW1vdmUQBxIUChBXZWlib19SZXNwUmVtb3ZlEAgSEQoNV2VpYm9fUmVxTGlz",
            "dBAJEhIKDldlaWJvX1Jlc3BMaXN0EAoSEwoPV2VpYm9fUmVxUHJhaXNlEAsS",
            "FAoQV2VpYm9fUmVzcFByYWlzZRAMEhMKD1dlaWJvX1JlcVJldmlldxANEhQK",
            "EFdlaWJvX1Jlc3BSZXZpZXcQDhISCg5XZWlib19SZXFSZWxheRAPEhMKD1dl",
            "aWJvX1Jlc3BSZWxheRAQEhMKD1dlaWJvX1JlcVJlcG9ydBAREhQKEFdlaWJv",
            "X1Jlc3BSZXBvcnQQEhIXChNXZWlib19SZXFSZXZpZXdMaXN0EBMSGAoUV2Vp",
            "Ym9fUmVzcFJldmlld0xpc3QQFBIZChVXZWlib19SZXFSZWxhdGlvbkxpc3QQ",
            "FRIaChZXZWlib19SZXNwUmVsYXRpb25MaXN0EBYSEQoNV2VpYm9fUmVxRmVl",
            "ZBAXEhIKDldlaWJvX1Jlc3BGZWVkEBgSFQoRV2VpYm9fUmVxUHJhaXNlcnMQ",
            "GRIWChJXZWlib19SZXNwUHJhaXNlcnMQGhIXChNXZWlib19SZXFOb3RpZnlM",
            "aXN0EBsSGAoUV2VpYm9fUmVzcE5vdGlmeUxpc3QQHBIbChdXZWlib19SZXFS",
            "ZWxhdGlvbkZvbGxvdxAdEhwKGFdlaWJvX1Jlc3BSZWxhdGlvbkZvbGxvdxAe",
            "EhUKEVdlaWJvX1JlcVJlbGF0aW9uEB8SFgoSV2VpYm9fUmVzcFJlbGF0aW9u",
            "ECASGQoVV2VpYm9fUmVxUmVtb3ZlUmV2aWV3ECESGgoWV2VpYm9fUmVzcFJl",
            "bW92ZVJldmlldxAiEhUKEVdlaWJvX1JlcUhvdFVzZXJzECMSFgoSV2VpYm9f",
            "UmVzcEhvdFVzZXJzECQqOgoTUEJNYWluQ21kUmFua1N1YkNtZBIQCgxSYW5r",
            "X1JlcUxpc3QQARIRCg1SYW5rX1Jlc3BMaXN0EAIq8AUKFFBCTWFpbkNtZFBy",
            "b21vU3ViQ21kEhQKEFByb21vX1JlcVByb2ZpbGUQARIVChFQcm9tb19SZXNw",
            "UHJvZmlsZRACEhUKEVByb21vX1JlcUNsdWJMaXN0EAMSFgoSUHJvbW9fUmVz",
            "cENsdWJMaXN0EAQSFQoRUHJvbW9fUmVxU2hhcmVVcmwQBRIWChJQcm9tb19S",
            "ZXNwU2hhcmVVcmwQBhIXChNQcm9tb19SZXFOb3RpZnlMaXN0EAcSGAoUUHJv",
            "bW9fUmVzcE5vdGlmeUxpc3QQCBIXChNQcm9tb19SZXFOb3RpZnlSZWFkEAkS",
            "GAoUUHJvbW9fUmVzcE5vdGlmeVJlYWQQChIYChRQcm9tb19SZXFBcHBTZXR0",
            "aW5ncxALEhkKFVByb21vX1Jlc3BBcHBTZXR0aW5ncxAMEhMKD1Byb21vX1Jl",
            "cVJlbGllZhANEhQKEFByb21vX1Jlc3BSZWxpZWYQDhIYChRQcm9tb19SZXFM",
            "dWNreWJveEdldBAPEhkKFVByb21vX1Jlc3BMdWNreWJveEdldBAQEhkKFVBy",
            "b21vX1JlcUx1Y2t5Ym94T3BlbhAREhoKFlByb21vX1Jlc3BMdWNreWJveE9w",
            "ZW4QEhIYChRQcm9tb19SZXFOb3RpZnlBd2FyZBATEhkKFVByb21vX1Jlc3BO",
            "b3RpZnlBd2FyZBAUEhkKFVByb21vX1JlcUFjdGl2aXR5TGlzdBAVEhoKFlBy",
            "b21vX1Jlc3BBY3Rpdml0eUxpc3QQFhIaChZQcm9tb19SZXFBY3Rpdml0eUF3",
            "YXJkEBcSGwoXUHJvbW9fUmVzcEFjdGl2aXR5QXdhcmQQGBIYChRQcm9tb19S",
            "ZXFBdXRvUmVzdGFydBAZEhkKFVByb21vX1Jlc3BBdXRvUmVzdGFydBAaEh8K",
            "G1Byb21vX1JlcUdldEZvdW5kT25saW5lTGlzdBAbEiAKHFByb21vX1Jlc3BH",
            "ZXRGb3VuZE9ubGluZUxpc3QQHCqHBwoTUEJNYWluQ21kTWFsbFN1YkNtZBIQ",
            "CgxNYWxsX1JlcUxpc3QQARIRCg1NYWxsX1Jlc3BMaXN0EAISGgoWTWFsbF9S",
            "ZXFBcHBsZVBheUNyZWF0ZRADEhsKF01hbGxfUmVzcEFwcGxlUGF5Q3JlYXRl",
            "EAQSGwoXTWFsbF9SZXFBcHBsZVBheURlbGl2ZXIQBRIcChhNYWxsX1Jlc3BB",
            "cHBsZVBheURlbGl2ZXIQBhITCg9NYWxsX1JlcVByb3BCdXkQBxIUChBNYWxs",
            "X1Jlc3BQcm9wQnV5EAgSGwoXTWFsbF9SZXFXZWl4aW5QYXlDcmVhdGUQCRIc",
            "ChhNYWxsX1Jlc3BXZWl4aW5QYXlDcmVhdGUQChIYChRNYWxsX1JlcUFsaVBh",
            "eUNyZWF0ZRALEhkKFU1hbGxfUmVzcEFsaVBheUNyZWF0ZRAMEhsKF01hbGxf",
            "UmVxSHVhd2VpUGF5Q3JlYXRlEA0SHAoYTWFsbF9SZXNwSHVhd2VpUGF5Q3Jl",
            "YXRlEA4SGQoVTWFsbF9SZXFWaXZvUGF5Q3JlYXRlEA8SGgoWTWFsbF9SZXNw",
            "Vml2b1BheUNyZWF0ZRAQEhQKEE1hbGxfUmVxR2lmdExpc3QQERIVChFNYWxs",
            "X1Jlc3BHaWZ0TGlzdBASEhcKE01hbGxfUmVxVXNlckFkZHJHZXQQExIYChRN",
            "YWxsX1Jlc3BVc2VyQWRkckdldBAUEhcKE01hbGxfUmVxVXNlckFkZHJTZXQQ",
            "FRIYChRNYWxsX1Jlc3BVc2VyQWRkclNldBAWEhgKFE1hbGxfUmVxR2lmdEV4",
            "Y2hhbmdlEBcSGQoVTWFsbF9SZXNwR2lmdEV4Y2hhbmdlEBgSHAoYTWFsbF9S",
            "ZXFHaWZ0RXhjaGFuZ2VMaXN0EBkSHQoZTWFsbF9SZXNwR2lmdEV4Y2hhbmdl",
            "TGlzdBAaEhkKFU1hbGxfUmVxT3Bwb1BheUNyZWF0ZRAbEhoKFk1hbGxfUmVz",
            "cE9wcG9QYXlDcmVhdGUQHBIkCiBNYWxsX1JlcU1hbGxHZXRQcmFjdGljZUdv",
            "b2RzTGlzdBAgEiUKIU1hbGxfUmVzcE1hbGxHZXRQcmFjdGljZUdvb2RzTGlz",
            "dBAhEh8KG01hbGxfUmVxTWFsbEJ1eVByYWN0aWNlUHJvcBAiEiAKHE1hbGxf",
            "UmVzcE1hbGxCdXlQcmFjdGljZVByb3AQIyrmGAoUUEJNYWluQ21kVGV4YXNT",
            "dWJDbWQSFgoSVGV4YXNfUmVxSm9pblRhYmxlEAESFwoTVGV4YXNfUmVxTGVh",
            "dmVUYWJsZRACEhAKDFRleGFzX1JlcVNpdBADEhIKDlRleGFzX1JlcVN0YW5k",
            "EAQSEwoPVGV4YXNfUmVxQ2hpcGluEAUSFgoSVGV4YXNfUmVxVGFiZWxJbmZv",
            "EAYSFQoRVGV4YXNfUmVxU2hvd0NhcmQQBxIRCg1UZXhhc19SZXFDaGF0EAgS",
            "EgoOVGV4YXNfUmVxQnV5aW4QCRIXChNUZXhhc19SZXFTdGFydE1hdGNoEAoS",
            "GQoVVGV4YXNfUmVxQnV5aW5IaXN0b3J5EAsSFAoQVGV4YXNfUmVxR2FtZUxv",
            "ZxAMEh8KG1RleGFzX1JlcVJlZ2lzdGVyQXV0b0FjdGlvbhANEhkKFVRleGFz",
            "X1JlcUJ1eUluc3VyYW5jZRAOEhcKE1RleGFzX1JlcUNsb3NlTWF0Y2gQDxIf",
            "ChtUZXhhc19SZXFFeHRlbmRUaGlua2luZ1RpbWUQEBIdChlUZXhhc19SZXFD",
            "aGFuZ2VNdWNrT3B0aW9uEBESKAokVGV4YXNfUmVxQ2hhbmdlSW5zdXJhbmNl",
            "Tm90aWZ5T3B0aW9uEBISFwoTVGV4YXNfUmVxTGlrZUFNYXRjaBATEhkKFVRl",
            "eGFzX1JlcVVubGlrZUFNYXRjaBAUEhUKEVRleGFzX1JlcUtpY2tVc2VyEBUS",
            "IAocVGV4YXNfUmVxUHJvY2Vzc0J1eWluUmVxdWVzdBAWEiAKHFRleGFzX1Jl",
            "cVNlbmRJbnRlcmFjdGl2ZUl0ZW0QFxIWChJUZXhhc19SZXFTTkdDb25maWcQ",
            "GBIYChRUZXhhc19SZXFTTkdDaGlwUmFuaxAZEhoKFlRleGFzX1JlcVNOR01h",
            "dGNoQm9hcmQQIBIXChNUZXhhc19SZXFCdXlEZXBvc2l0ECESHAoYVGV4YXNf",
            "UmVxU2hvd1B1YmxpY0NhcmRzECISGQoVVGV4YXNfUmVxU2hvd0FsbEhhbmRz",
            "ECMSFgoSVGV4YXNfUmVxUmVjb3JkTnVtECQSHgoaVGV4YXNfUmVxUHJlcGFy",
            "ZUFkZERlcG9zaXQQJRIcChhUZXhhc19SZXFQcmVwYXJlQ2hlY2tvdXQQJhIV",
            "ChFUZXhhc19SZXFDaGVja291dBAnEhgKFFRleGFzX1JlcVByaXZhdGVJbmZv",
            "ECgSGgoVVGV4YXNfTm90aWZ5Sm9pblRhYmxlEIEgEhsKFlRleGFzX05vdGlm",
            "eUxlYXZlVGFibGUQgiASGAoTVGV4YXNfTm90aWZ5VXNlclNpdBCDIBIaChVU",
            "ZXhhc19Ob3RpZnlVc2VyU3RhbmQQhCASHAoXVGV4YXNfTm90aWZ5U3RhcnRD",
            "aGlwaW4QhSASGgoVVGV4YXNfTm90aWZ5RW5kQ2hpcGluEIYgEhoKFVRleGFz",
            "X05vdGlmeVRhYmxlSW5mbxCHIBIZChRUZXhhc19Ob3RpZnlTaG93Q2FyZBCI",
            "IBIVChBUZXhhc19Ob3RpZnlDaGF0EIkgEhoKFVRleGFzX05vdGlmeUdhbWVT",
            "dGFydBCQIBIZChRUZXhhc19Ob3RpZnlEZWFsRmxvcBCRIBIZChRUZXhhc19O",
            "b3RpZnlEZWFsVHVybhCSIBIaChVUZXhhc19Ob3RpZnlEZWFsUml2ZXIQkyAS",
            "HgoZVGV4YXNfTm90aWZ5U3RhcnREZWFsQ2FyZBCUIBIdChhUZXhhc19Ob3Rp",
            "ZnlEZWFsSG9sZUNhcmQQlSASHQoYVGV4YXNfTm90aWZ5U3luY1NlYXRJbmZv",
            "EJYgEhsKFlRleGFzX05vdGlmeUdhbWVSZXN1bHQQlyASGwoWVGV4YXNfTm90",
            "aWZ5VXBkYXRlUG90cxCYIBIcChdUZXhhc19Ob3RpZnlVc2VyUHV0QW50ZRCZ",
            "IBIiCh1UZXhhc19Ob3RpZnlVc2VySW52YWxpZEFjdGlvbhCgIBIdChhUZXhh",
            "c19Ob3RpZnlTeW5jQ2FyZFR5cGUQoSASGgoVVGV4YXNfTm90aWZ5VXNlckJ1",
            "eWluEKIgEhsKFlRleGFzX05vdGlmeVN0YXJ0TWF0Y2gQoyASGgoVVGV4YXNf",
            "Tm90aWZ5TWF0Y2hPdmVyEKQgEh0KGFRleGFzX05vdGlmeUJ1eWluSGlzdG9y",
            "eRClIBIYChNUZXhhc19Ob3RpZnlHYW1lTG9nEKYgEiMKHlRleGFzX05vdGlm",
            "eVJlZ2lzdGVyQXV0b0FjdGlvbhCnIBIjCh5UZXhhc19Ob3RpZnlFbnRlcklu",
            "c3VyYW5jZU1vZGUQqCASIQocVGV4YXNfTm90aWZ5VXNlckJ1eUluc3VyYW5j",
            "ZRCpIBIkCh9UZXhhc19Ob3RpZnlVc2VyRW5kQnV5SW5zdXJhbmNlELAgEiUK",
            "IFRleGFzX05vdGlmeVVzZXJJbnN1cmFuY2VQYXltZW50ELEgEiUKIFRleGFz",
            "X05vdGlmeVVzZXJEaXNhYmxlSW5zdXJhbmNlELIgEh0KGFRleGFzX05vdGlm",
            "eUFsbFNlYXRzSW5mbxCzIBIfChpUZXhhc19Ob3RpZnlNYXRjaFdpbGxDbG9z",
            "ZRC0IBIpCiRUZXhhc19Ob3RpZnlFeHRlbmRUaGlua2luZ1RpbWVSZXN1bHQQ",
            "tSASIwoeVGV4YXNfTm90aWZ5VXBkYXRlVGhpbmtpbmdUaW1lELYgEiEKHFRl",
            "eGFzX05vdGlmeUNoYW5nZU11Y2tPcHRpb24QtyASHQoYVGV4YXNfTm90aWZ5",
            "U2hvd0NhcmRSZXNwELggEiwKJ1RleGFzX05vdGlmeUNoYW5nZUluc3VyYW5j",
            "ZU5vdGlmeU9wdGlvbhC5IBIfChpUZXhhc19Ob3RpZnlMaWtlQU1hdGNoUmVz",
            "cBDAIBIhChxUZXhhc19Ob3RpZnlVbmxpa2VBTWF0Y2hSZXNwEMEgEh0KGFRl",
            "eGFzX05vdGlmeVJlc3BLaWNrVXNlchDCIBIkCh9UZXhhc19Ob3RpZnlQcm9j",
            "ZXNzQnV5aW5SZXF1ZXN0EMMgEiUKIFRleGFzX05vdGlmeVVwZGF0ZU1hdGNo",
            "Q2xvc2VUaW1lEMQgEioKJVRleGFzX05vdGlmeVN5bmNJbnRlcmFjdGl2ZUl0",
            "ZW1Db25maWcQxSASKAojVGV4YXNfTm90aWZ5U2VuZEludGVyYWN0aXZlSXRl",
            "bVJlc3AQxiASKAojVGV4YXNfTm90aWZ5VXNlclNlbmRJbnRlcmFjdGl2ZUl0",
            "ZW0QxyASJgohVGV4YXNfTm90aWZ5VXNlclVwZGF0ZU1hdGNoQ29uZmlnEMgg",
            "EikKJFRleGFzX05vdGlmeVVzZXJNYXRjaENsb3NlVGltZVJlbWluZBDJIBIb",
            "ChZUZXhhc19Ob3RpZnlSYWlzZUJsaW5kENAgEhgKE1RleGFzX05vdGlmeVVz",
            "ZXJPdXQQ0SASGgoVVGV4YXNfTm90aWZ5U05HQ29uZmlnENIgEhwKF1RleGFz",
            "X05vdGlmeVNOR0NoaXBSYW5rENMgEh4KGVRleGFzX05vdGlmeVNOR01hdGNo",
            "Qm9hcmQQ1CASIQocVGV4YXNfTm90aWZ5U3RhcnRNYXRjaFJlc3VsdBDVIBIb",
            "ChZUZXhhc19Ob3RpZnlCdXlEZXBvc2l0ENYgEh4KGVRleGFzX05vdGlmeURl",
            "cG9zaXRDaGFuZ2UQ1yASHAoXVGV4YXNfTm90aWZ5RGVwb3NpdE92ZXIQ2CAS",
            "IAobVGV4YXNfTm90aWZ5U2hvd1B1YmxpY0NhcmRzENkgEh4KGVRleGFzX1Jl",
            "c3BTaG93UHVibGljQ2FyZHMQ4CASIwoeVGV4YXNfTm90aWZ5V2hvU2hvd1B1",
            "YmxpY0NhcmRzEOEgEh0KGFRleGFzX05vdGlmeVNob3dBbGxIYW5kcxDiIBIb",
            "ChZUZXhhc19SZXNwU2hvd0FsbEhhbmRzEOMgEhgKE1RleGFzX1Jlc3BSZWNv",
            "cmROdW0Q5CASIAobVGV4YXNfUmVzcFByZXBhcmVBZGREZXBvc2l0EOUgEh4K",
            "GVRleGFzX1Jlc3BQcmVwYXJlQ2hlY2tvdXQQ5iASFwoSVGV4YXNfUmVzcENo",
            "ZWNrb3V0EOcgEhoKFVRleGFzX1Jlc3BQcml2YXRlSW5mbxDoIBIXChJUZXhh",
            "c19Ob3RpZnlMb2dvdXQQ6SASIQocVGV4YXNfTm90aWZ5VWVzck5vdEpvaW5U",
            "YWJsZRCBQCrmGAoUUEJNYWluQ21kU2hvcnRTdWJDbWQSFgoSU2hvcnRfUmVx",
            "Sm9pblRhYmxlEAESFwoTU2hvcnRfUmVxTGVhdmVUYWJsZRACEhAKDFNob3J0",
            "X1JlcVNpdBADEhIKDlNob3J0X1JlcVN0YW5kEAQSEwoPU2hvcnRfUmVxQ2hp",
            "cGluEAUSFgoSU2hvcnRfUmVxVGFiZWxJbmZvEAYSFQoRU2hvcnRfUmVxU2hv",
            "d0NhcmQQBxIRCg1TaG9ydF9SZXFDaGF0EAgSEgoOU2hvcnRfUmVxQnV5aW4Q",
            "CRIXChNTaG9ydF9SZXFTdGFydE1hdGNoEAoSGQoVU2hvcnRfUmVxQnV5aW5I",
            "aXN0b3J5EAsSFAoQU2hvcnRfUmVxR2FtZUxvZxAMEh8KG1Nob3J0X1JlcVJl",
            "Z2lzdGVyQXV0b0FjdGlvbhANEhkKFVNob3J0X1JlcUJ1eUluc3VyYW5jZRAO",
            "EhcKE1Nob3J0X1JlcUNsb3NlTWF0Y2gQDxIfChtTaG9ydF9SZXFFeHRlbmRU",
            "aGlua2luZ1RpbWUQEBIdChlTaG9ydF9SZXFDaGFuZ2VNdWNrT3B0aW9uEBES",
            "KAokU2hvcnRfUmVxQ2hhbmdlSW5zdXJhbmNlTm90aWZ5T3B0aW9uEBISFwoT",
            "U2hvcnRfUmVxTGlrZUFNYXRjaBATEhkKFVNob3J0X1JlcVVubGlrZUFNYXRj",
            "aBAUEhUKEVNob3J0X1JlcUtpY2tVc2VyEBUSIAocU2hvcnRfUmVxUHJvY2Vz",
            "c0J1eWluUmVxdWVzdBAWEiAKHFNob3J0X1JlcVNlbmRJbnRlcmFjdGl2ZUl0",
            "ZW0QFxIWChJTaG9ydF9SZXFTTkdDb25maWcQGBIYChRTaG9ydF9SZXFTTkdD",
            "aGlwUmFuaxAZEhoKFlNob3J0X1JlcVNOR01hdGNoQm9hcmQQIBIXChNTaG9y",
            "dF9SZXFCdXlEZXBvc2l0ECESHAoYU2hvcnRfUmVxU2hvd1B1YmxpY0NhcmRz",
            "ECISGQoVU2hvcnRfUmVxU2hvd0FsbEhhbmRzECMSFgoSU2hvcnRfUmVxUmVj",
            "b3JkTnVtECQSHgoaU2hvcnRfUmVxUHJlcGFyZUFkZERlcG9zaXQQJRIcChhT",
            "aG9ydF9SZXFQcmVwYXJlQ2hlY2tvdXQQJhIVChFTaG9ydF9SZXFDaGVja291",
            "dBAnEhgKFFNob3J0X1JlcVByaXZhdGVJbmZvECgSGgoVU2hvcnRfTm90aWZ5",
            "Sm9pblRhYmxlEIEgEhsKFlNob3J0X05vdGlmeUxlYXZlVGFibGUQgiASGAoT",
            "U2hvcnRfTm90aWZ5VXNlclNpdBCDIBIaChVTaG9ydF9Ob3RpZnlVc2VyU3Rh",
            "bmQQhCASHAoXU2hvcnRfTm90aWZ5U3RhcnRDaGlwaW4QhSASGgoVU2hvcnRf",
            "Tm90aWZ5RW5kQ2hpcGluEIYgEhoKFVNob3J0X05vdGlmeVRhYmxlSW5mbxCH",
            "IBIZChRTaG9ydF9Ob3RpZnlTaG93Q2FyZBCIIBIVChBTaG9ydF9Ob3RpZnlD",
            "aGF0EIkgEhoKFVNob3J0X05vdGlmeUdhbWVTdGFydBCQIBIZChRTaG9ydF9O",
            "b3RpZnlEZWFsRmxvcBCRIBIZChRTaG9ydF9Ob3RpZnlEZWFsVHVybhCSIBIa",
            "ChVTaG9ydF9Ob3RpZnlEZWFsUml2ZXIQkyASHgoZU2hvcnRfTm90aWZ5U3Rh",
            "cnREZWFsQ2FyZBCUIBIdChhTaG9ydF9Ob3RpZnlEZWFsSG9sZUNhcmQQlSAS",
            "HQoYU2hvcnRfTm90aWZ5U3luY1NlYXRJbmZvEJYgEhsKFlNob3J0X05vdGlm",
            "eUdhbWVSZXN1bHQQlyASGwoWU2hvcnRfTm90aWZ5VXBkYXRlUG90cxCYIBIc",
            "ChdTaG9ydF9Ob3RpZnlVc2VyUHV0QW50ZRCZIBIiCh1TaG9ydF9Ob3RpZnlV",
            "c2VySW52YWxpZEFjdGlvbhCgIBIdChhTaG9ydF9Ob3RpZnlTeW5jQ2FyZFR5",
            "cGUQoSASGgoVU2hvcnRfTm90aWZ5VXNlckJ1eWluEKIgEhsKFlNob3J0X05v",
            "dGlmeVN0YXJ0TWF0Y2gQoyASGgoVU2hvcnRfTm90aWZ5TWF0Y2hPdmVyEKQg",
            "Eh0KGFNob3J0X05vdGlmeUJ1eWluSGlzdG9yeRClIBIYChNTaG9ydF9Ob3Rp",
            "ZnlHYW1lTG9nEKYgEiMKHlNob3J0X05vdGlmeVJlZ2lzdGVyQXV0b0FjdGlv",
            "bhCnIBIjCh5TaG9ydF9Ob3RpZnlFbnRlckluc3VyYW5jZU1vZGUQqCASIQoc",
            "U2hvcnRfTm90aWZ5VXNlckJ1eUluc3VyYW5jZRCpIBIkCh9TaG9ydF9Ob3Rp",
            "ZnlVc2VyRW5kQnV5SW5zdXJhbmNlELAgEiUKIFNob3J0X05vdGlmeVVzZXJJ",
            "bnN1cmFuY2VQYXltZW50ELEgEiUKIFNob3J0X05vdGlmeVVzZXJEaXNhYmxl",
            "SW5zdXJhbmNlELIgEh0KGFNob3J0X05vdGlmeUFsbFNlYXRzSW5mbxCzIBIf",
            "ChpTaG9ydF9Ob3RpZnlNYXRjaFdpbGxDbG9zZRC0IBIpCiRTaG9ydF9Ob3Rp",
            "ZnlFeHRlbmRUaGlua2luZ1RpbWVSZXN1bHQQtSASIwoeU2hvcnRfTm90aWZ5",
            "VXBkYXRlVGhpbmtpbmdUaW1lELYgEiEKHFNob3J0X05vdGlmeUNoYW5nZU11",
            "Y2tPcHRpb24QtyASHQoYU2hvcnRfTm90aWZ5U2hvd0NhcmRSZXNwELggEiwK",
            "J1Nob3J0X05vdGlmeUNoYW5nZUluc3VyYW5jZU5vdGlmeU9wdGlvbhC5IBIf",
            "ChpTaG9ydF9Ob3RpZnlMaWtlQU1hdGNoUmVzcBDAIBIhChxTaG9ydF9Ob3Rp",
            "ZnlVbmxpa2VBTWF0Y2hSZXNwEMEgEh0KGFNob3J0X05vdGlmeVJlc3BLaWNr",
            "VXNlchDCIBIkCh9TaG9ydF9Ob3RpZnlQcm9jZXNzQnV5aW5SZXF1ZXN0EMMg",
            "EiUKIFNob3J0X05vdGlmeVVwZGF0ZU1hdGNoQ2xvc2VUaW1lEMQgEioKJVNo",
            "b3J0X05vdGlmeVN5bmNJbnRlcmFjdGl2ZUl0ZW1Db25maWcQxSASKAojU2hv",
            "cnRfTm90aWZ5U2VuZEludGVyYWN0aXZlSXRlbVJlc3AQxiASKAojU2hvcnRf",
            "Tm90aWZ5VXNlclNlbmRJbnRlcmFjdGl2ZUl0ZW0QxyASJgohU2hvcnRfTm90",
            "aWZ5VXNlclVwZGF0ZU1hdGNoQ29uZmlnEMggEikKJFNob3J0X05vdGlmeVVz",
            "ZXJNYXRjaENsb3NlVGltZVJlbWluZBDJIBIbChZTaG9ydF9Ob3RpZnlSYWlz",
            "ZUJsaW5kENAgEhgKE1Nob3J0X05vdGlmeVVzZXJPdXQQ0SASGgoVU2hvcnRf",
            "Tm90aWZ5U05HQ29uZmlnENIgEhwKF1Nob3J0X05vdGlmeVNOR0NoaXBSYW5r",
            "ENMgEh4KGVNob3J0X05vdGlmeVNOR01hdGNoQm9hcmQQ1CASIQocU2hvcnRf",
            "Tm90aWZ5U3RhcnRNYXRjaFJlc3VsdBDVIBIbChZTaG9ydF9Ob3RpZnlCdXlE",
            "ZXBvc2l0ENYgEh4KGVNob3J0X05vdGlmeURlcG9zaXRDaGFuZ2UQ1yASHAoX",
            "U2hvcnRfTm90aWZ5RGVwb3NpdE92ZXIQ2CASIAobU2hvcnRfTm90aWZ5U2hv",
            "d1B1YmxpY0NhcmRzENkgEh4KGVNob3J0X1Jlc3BTaG93UHVibGljQ2FyZHMQ",
            "4CASIwoeU2hvcnRfTm90aWZ5V2hvU2hvd1B1YmxpY0NhcmRzEOEgEh0KGFNo",
            "b3J0X05vdGlmeVNob3dBbGxIYW5kcxDiIBIbChZTaG9ydF9SZXNwU2hvd0Fs",
            "bEhhbmRzEOMgEhgKE1Nob3J0X1Jlc3BSZWNvcmROdW0Q5CASIAobU2hvcnRf",
            "UmVzcFByZXBhcmVBZGREZXBvc2l0EOUgEh4KGVNob3J0X1Jlc3BQcmVwYXJl",
            "Q2hlY2tvdXQQ5iASFwoSU2hvcnRfUmVzcENoZWNrb3V0EOcgEhoKFVNob3J0",
            "X1Jlc3BQcml2YXRlSW5mbxDoIBIXChJTaG9ydF9Ob3RpZnlMb2dvdXQQ6SAS",
            "IQocU2hvcnRfTm90aWZ5VWVzck5vdEpvaW5UYWJsZRCBQCq9BAoYUEJNYWlu",
            "Q21kTWF0Y2hMaXN0U3ViQ21kEhMKD01MX1JlcU1hdGNoTGlzdBABEhQKEE1M",
            "X1Jlc3BNYXRjaExpc3QQAhIVChFNTF9SZXFDcmVhdGVNYXRjaBADEhYKEk1M",
            "X1Jlc3BDcmVhdGVNYXRjaBAEEhQKEE1MX1JlcU1hdGNoSW5kZXgQBRIVChFN",
            "TF9SZXNwTWF0Y2hJbmRleBAGEhcKE01MX1JlcUNsdWJNYXRjaExpc3QQBxIY",
            "ChRNTF9SZXNwQ2x1Yk1hdGNoTGlzdBAIEhgKFE1MX1JlcVF1aWNrSm9pbk1h",
            "dGNoEAkSGQoVTUxfUmVzcFF1aWNrSm9pbk1hdGNoEAoSGgoWTUxfUmVxTWF0",
            "Y2hMaXN0QnlHcm91cBALEhsKF01MX1Jlc3BNYXRjaExpc3RCeUdyb3VwEAwS",
            "GAoUTUxfUmVxSm9pbkdyb3VwTWF0Y2gQDRIZChVNTF9SZXNwSm9pbkdyb3Vw",
            "TWF0Y2gQDhIeChpNTF9SZXFHZXRDcmVhdGVNYXRjaENvbmZpZxAPEh8KG01M",
            "X1Jlc3BHZXRDcmVhdGVNYXRjaENvbmZpZxAQEhMKD01MX1JlcUNyZWF0ZVNO",
            "RxAREhQKEE1MX1Jlc3BDcmVhdGVTTkcQEhIVChFNTF9SZXFDcmVhdGVTaG9y",
            "dBATEhYKEk1MX1Jlc3BDcmVhdGVTaG9ydBAUEhMKDk1MX1JlcUZldGNoTXNn",
            "EIEgEhQKD01MX1Jlc3BGZXRjaE1zZxCCICqtCgoTUEJNYWluQ21kR0xvZ1N1",
            "YkNtZBIbChdHTG9nX1JlcVVzZXJNYXRjaFJlY29yZBABEhwKGEdMb2dfUmVz",
            "cFVzZXJNYXRjaFJlY29yZBACEhcKE0dMb2dfUmVxTWF0Y2hEZXRhaWwQAxIY",
            "ChRHTG9nX1Jlc3BNYXRjaERldGFpbBAEEhQKEEdMb2dfUmVxTWF0Y2hMb2cQ",
            "BRIVChFHTG9nX1Jlc3BNYXRjaExvZxAGEh0KGUdMb2dfUmVxRmV0Y2hGYXZN",
            "YXRjaExvZ3MQBxIeChpHTG9nX1Jlc3BGZXRjaEZhdk1hdGNoTG9ncxAIEh0K",
            "GUdMb2dfUmVxRmF2TWF0Y2hMb2dEZXRhaWwQCRIeChpHTG9nX1Jlc3BGYXZN",
            "YXRjaExvZ0RldGFpbBAKEh0KGUdMb2dfUmVxRGVsZXRlRmF2TWF0Y2hMb2cQ",
            "CxIeChpHTG9nX1Jlc3BEZWxldGVGYXZNYXRjaExvZxAMEhcKE0dMb2dfUmVx",
            "RmF2TWF0Y2hMb2cQDRIYChRHTG9nX1Jlc3BGYXZNYXRjaExvZxAOEh4KGkdM",
            "b2dfUmVxUXVlcnlGYXZNYXRjaENvdW50EA8SHwobR0xvZ19SZXNwUXVlcnlG",
            "YXZNYXRjaENvdW50EBASHQoZR0xvZ19SZXFRdWVyeVVzZXJHYW1lRGF0YRAR",
            "Eh4KGkdMb2dfUmVzcFF1ZXJ5VXNlckdhbWVEYXRhEBISGwoXR0xvZ19SZXFD",
            "bHViTWF0Y2hSZWNvcmQQExIeChpHTG9nX1JlcUNsdWJNYXRjaFN1cGVyU3Rh",
            "dBAUEh8KG0dMb2dfUmVzcENsdWJNYXRjaFN1cGVyU3RhdBAVEhwKGEdMb2df",
            "UmVzcENsdWJNYXRjaFJlY29yZBAWEhwKGEdMb2dfUmVxVW5pb25NYXRjaFJl",
            "Y29yZBAXEh0KGUdMb2dfUmVzcFVuaW9uTWF0Y2hSZWNvcmQQGBIcChhHTG9n",
            "X1JlcVVuaW9uTWF0Y2hEZXRhaWwQGRIdChlHTG9nX1Jlc3BVbmlvbk1hdGNo",
            "RGV0YWlsECASHwobR0xvZ19SZXFVbmlvbk1hdGNoU3VwZXJTdGF0ECESIAoc",
            "R0xvZ19SZXNwVW5pb25NYXRjaFN1cGVyU3RhdBAiEh0KGUdMb2dfUmVxVW5p",
            "b25NYXRjaFN1bW1hcnkQIxIeChpHTG9nX1Jlc3BVbmlvbk1hdGNoU3VtbWFy",
            "eRAkEhwKGEdMb2dfUmVxQ2x1Yk1hdGNoU3VtbWFyeRAlEh0KGUdMb2dfUmVz",
            "cENsdWJNYXRjaFN1bW1hcnkQJhIZChVHTG9nX1VzZXJQb2tlckRhdGFSZXEQ",
            "JxIaChZHTG9nX1VzZXJQb2tlckRhdGFSZXNwECgSFAoQR0xvZ19LZWVwSGFu",
            "ZFJlcRApEhUKEUdMb2dfS2VlcEhhbmRSZXNwEDASGQoVR0xvZ19GYXZvcml0",
            "ZUhhbmRzUmVxEDESGgoWR0xvZ19GYXZvcml0ZUhhbmRzUmVzcBAyEhwKGEdM",
            "b2dfVmlld0Zhdm9yaXRlSGFuZFJlcRAzEh0KGUdMb2dfVmlld0Zhdm9yaXRl",
            "SGFuZFJlc3AQNBIdChlHTG9nX1Nob3dGYXZvcml0ZUhhbmRzUmVxEDUSHgoa",
            "R0xvZ19TaG93RmF2b3JpdGVIYW5kc1Jlc3AQNhIeChpHTG9nX1Nob3dGYXZQ",
            "dWJsaWNDYXJkc1JlcRA3Eh8KG0dMb2dfU2hvd0ZhdlB1YmxpY0NhcmRzUmVz",
            "cBA4KsIBChVQQk1haW5DbWROb3RpZnlTdWJDbWQSGwoXTm90aWZ5X1N5bmNO",
            "b3RpZmljYXRpb24QARIiCh5Ob3RpZnlfU3luY05vdGlmaWNhdGlvbk9uTG9n",
            "aW4QAhIaChZOb3RpZnlfUmVxRmV0Y2hOb3RpZnlzEAMSGwoXTm90aWZ5X1Jl",
            "c3BGZXRjaE5vdGlmeXMQBBIWChJOb3RpZnlfUmVxQnVsbGV0aW4QBRIXChNO",
            "b3RpZnlfUmVzcEJ1bGxldGluEAYq7QYKF1BCTWFpbkNtZEh1blRleGFzU3Vi",
            "Q21kEhkKFUh1blRleGFzX1JlcUpvaW5UYWJsZRABEhoKFkh1blRleGFzX1Jl",
            "cUxlYXZlVGFibGUQAhITCg9IdW5UZXhhc19SZXFTaXQQAxIVChFIdW5UZXhh",
            "c19SZXFTdGFuZBAEEhkKFUh1blRleGFzX1JlcVRhYmVsSW5mbxAFEhYKEkh1",
            "blRleGFzX1JlcUNoaXBpbhAGEhQKEEh1blRleGFzX1JlcUNoYXQQBxIXChNI",
            "dW5UZXhhc19SZXFIaXN0b3J5EAgSGAoUSHVuVGV4YXNfUmVxT25sb29rZXIQ",
            "CRIdChhIdW5UZXhhc19Ob3RpZnlKb2luVGFibGUQgSASHgoZSHVuVGV4YXNf",
            "Tm90aWZ5TGVhdmVUYWJsZRCCIBIbChZIdW5UZXhhc19Ob3RpZnlVc2VyU2l0",
            "EIMgEh0KGEh1blRleGFzX05vdGlmeVVzZXJTdGFuZBCEIBIdChhIdW5UZXhh",
            "c19Ob3RpZnlUYWJsZUluZm8QhSASHgoZSHVuVGV4YXNfTm90aWZ5VXNlckNo",
            "aXBpbhCGIBIdChhIdW5UZXhhc19TeW5jT3RoZXJDaGlwaW4QhyASGwoWSHVu",
            "VGV4YXNfTm90aWZ5UHJlcGFyZRCIIBIcChdIdW5UZXhhc19Ob3RpZnlEZWFs",
            "Q2FyZBCJIBIgChtIdW5UZXhhc19Ob3RpZnlTdGFydEJldHRpbmcQkCASHAoX",
            "SHVuVGV4YXNfTm90aWZ5T3BlbkNhcmQQkSASGgoVSHVuVGV4YXNfTm90aWZ5",
            "UGF5QmV0EJIgEhwKF0h1blRleGFzX05vdGlmeVVzZXJDaGF0EJMgEiAKG0h1",
            "blRleGFzX1N5bmNTZWF0VXNlckNoaXBpbhCUIBIaChVIdW5UZXhhc19TeW5j",
            "Qm9udXNQb3QQlSASGgoVSHVuVGV4YXNfU3luY1NlYXRJbmZvEJYgEhsKFkh1",
            "blRleGFzX1N5bmNQbGF5ZXJOdW0QlyASGQoUSHVuVGV4YXNfUmVzcEhpc3Rv",
            "cnkQmCASGgoVSHVuVGV4YXNfUmVzcE9ubG9va2VyEJkgEhoKFUh1blRleGFz",
            "X1JlcVF1aWNrSm9pbhCBQBIbChZIdW5UZXhhc19SZXNwUXVpY2tKb2luEIJA",
            "KrgCChNQQk1haW5DbWRDaGF0U3ViQ21kEhsKF0NoYXRfUmVnaXN0ZXJDaGFu",
            "bmVsUmVxEAESHAoYQ2hhdF9SZWdpc3RlckNoYW5uZWxSZXNwEAISHQoZQ2hh",
            "dF9VblJlZ2lzdGVyQ2hhbm5lbFJlcRADEh4KGkNoYXRfVW5SZWdpc3RlckNo",
            "YW5uZWxSZXNwEAQSFAoQQ2hhdF9TZW5kQ2hhdFJlcRAFEhUKEUNoYXRfU2Vu",
            "ZENoYXRSZXNwEAYSFQoRQ2hhdF9TZW5kQ2hhdFB1c2gQBxIfChtDaGF0X1Nl",
            "bmRJbnRlcmFjdGl2ZVByb3BSZXEQCBIgChxDaGF0X1NlbmRJbnRlcmFjdGl2",
            "ZVByb3BSZXNwEAkSIAocQ2hhdF9TZW5kSW50ZXJhY3RpdmVQcm9wUHVzaBAK",
            "Kv4LCgVQb2tlchIPCgtDbWRMb2dpblJlcRABEhAKDENtZExvZ2luUmVzcBAC",
            "EhAKDENtZExvZ291dFJlcRADEhEKDUNtZExvZ291dFJlc3AQBBISCg5DbWRQ",
            "bGF5SW5mb1JlcRAFEhMKD0NtZFBsYXlJbmZvUmVzcBAGEhEKDUNtZFNpdGRv",
            "d25SZXEQBxISCg5DbWRTaXRkb3duUmVzcBAIEhEKDUNtZFN0YW5kdXBSZXEQ",
            "CRISCg5DbWRTdGFuZHVwUmVzcBAKEhAKDENtZEFjdGlvblJlcRALEhEKDUNt",
            "ZEFjdGlvblJlc3AQDBITCg9DbWRTaG93SGFuZHNSZXEQDRIUChBDbWRTaG93",
            "SGFuZHNSZXNwEA4SEAoMQ21kQnV5SW5zUmVxEA8SEQoNQ21kQnV5SW5zUmVz",
            "cBAQEhgKFENtZFNldExlYXZlU3RhdHVzUmVxEBESGQoVQ21kU2V0TGVhdmVT",
            "dGF0dXNSZXNwEBISFQoRQ21kSGFuZEhpc3RvcnlSZXEQExIWChJDbWRIYW5k",
            "SGlzdG9yeVJlc3AQFBIZChVDbWRHZXRPbmxvb2tlckxpc3RSZXEQFRIaChZD",
            "bWRHZXRPbmxvb2tlckxpc3RSZXNwEBYSGQoVQ21kU2hvd1B1YmxpY0NhcmRz",
            "UmVxEBcSGgoWQ21kU2hvd1B1YmxpY0NhcmRzUmVzcBAYEhYKEkNtZFNob3dB",
            "bGxIYW5kc1JlcRAZEhcKE0NtZFNob3dBbGxIYW5kc1Jlc3AQGhIUChBDbWRH",
            "ZXRSb29tRmVlUmVxEBsSFQoRQ21kR2V0Um9vbUZlZVJlc3AQHBIUChBDbWRF",
            "eHRlbmRUaW1lUmVxEB0SFQoRQ21kRXh0ZW5kVGltZVJlc3AQHhIZChVDbWRL",
            "ZWVwSGlzdG9yeUhhbmRSZXEQHxIaChZDbWRLZWVwSGlzdG9yeUhhbmRSZXNw",
            "ECASEwoPQ21kR2V0UG9pbnRzUmVxECESFAoQQ21kR2V0UG9pbnRzUmVzcBAi",
            "EhQKEENtZExvYWRQb2luc3RSZXEQIxIVChFDbWRMb2FkUG9pbnRzUmVzcBAk",
            "EhEKDENtZExvZ2luUHVzaBCBIBISCg1DbWRMb2dvdXRQdXNoEIIgEhMKDkNt",
            "ZFNpdGRvd25QdXNoEIMgEhMKDkNtZFN0YW5kdXBQdXNoEIQgEhUKEENtZEdh",
            "bWVSZWFkeVB1c2gQhSASFQoQQ21kR2FtZVN0YXJ0UHVzaBCGIBIQCgtDbWRB",
            "bnRlUHVzaBCHIBIQCgtDbWREZWFsUHVzaBCIIBIXChJDbWRTdGFydEFjdGlv",
            "blB1c2gQiSASEgoNQ21kQWN0aW9uUHVzaBCKIBISCg1DbWRSZWZ1bmRQdXNo",
            "EIsgEhQKD0NtZFJvdW5kRW5kUHVzaBCMIBIQCgtDbWRGbG9wUHVzaBCNIBIQ",
            "CgtDbWRUdXJuUHVzaBCOIBIRCgxDbWRSaXZlclB1c2gQjyASFAoPQ21kR2Ft",
            "ZU92ZXJQdXNoEJAgEhUKEENtZFNob3dIYW5kc1B1c2gQkSASGAoTQ21kUHJl",
            "U2hvd0hhbmRzUHVzaBCSIBIRCgxDbWRCdXlpblB1c2gQkyASFAoPQ21kRW50",
            "ZXJJbnNQdXNoEJQgEhcKEkNtZFN0YXJ0QnV5SW5zUHVzaBCVIBISCg1DbWRC",
            "dXlJbnNQdXNoEJYgEhIKDUNtZFBheUluc1B1c2gQlyASFgoRQ21kRGlzYWJs",
            "ZUluc1B1c2gQmCASGgoVQ21kU2V0TGVhdmVTdGF0dXNQdXNoEJkgEh4KGUNt",
            "ZENhblNob3dQdWJsaWNDYXJkc1B1c2gQmiASHgoZQ21kV2hvU2hvd1B1Ymxp",
            "Y0NhcmRzUHVzaBCbIBIbChZDbWRDYW5TaG93QWxsSGFuZHNQdXNoEJwgEhoK",
            "FUNtZEJ1eUluQ291bnRkb3duUHVzaBCdIBIWChFDbWRFeHRlbmRUaW1lUHVz",
            "aBCeIBIVChBDbWRMdWNreUNhcmRQdXNoEJ8gEhcKEkNtZFBvaW50Q2hhbmdl",
            "UHVzaBCgICrwBAoITWF0Y2hNZ3ISFQoRZ2V0TWF0Y2hDb25maWdSZXEQARIW",
            "ChJnZXRNYXRjaENvbmZpZ1Jlc3AQAhISCg5jcmVhdGVNYXRjaFJlcRADEhMK",
            "D2NyZWF0ZU1hdGNoUmVzcBAEEhIKDnNlYXJjaE1hdGNoUmVxEAUSEwoPc2Vh",
            "cmNoTWF0Y2hSZXNwEAYSEwoPZ2V0TWF0Y2hMaXN0UmVxEAcSFAoQZ2V0TWF0",
            "Y2hMaXN0UmVzcBAIEhMKD21hdGNoQmFsYW5jZVJlcRAJEhQKEG1hdGNoQmFs",
            "YW5jZVJlc3AQChIMCghidXlpblJlcRALEg0KCWJ1eWluUmVzcBAMEhEKDWNs",
            "b3NlTWF0Y2hSZXEQDRISCg5jbG9zZU1hdGNoUmVzcBAOEhYKEmdldFJlYWx0",
            "aW1lRGF0YVJlcRAPEhcKE2dldFJlYWx0aW1lRGF0YVJlc3AQEBIRCg1zdGFy",
            "dE1hdGNoUmVxEBESEgoOc3RhcnRNYXRjaFJlc3AQEhIXChNzZXR0bGVtZW50",
            "RGVUYWlsUmVxEBMSGAoUc2V0dGxlbWVudERlVGFpbFJlc3AQFBIRCg1zZXR0",
            "bGVtZW50UmVxEBUSEgoOc2V0dGxlbWVudFJlc3AQFhITCg9jaGVja1BlbmFs",
            "dHlSZXEQFxIUChBjaGVja1BlbmFsdHlSZXNwEBgSEgoNbWF0Y2hPdmVyUHVz",
            "aBCBIBITCg5zZXR0bGVtZW50UHVzaBCCIBITCg5jbG9zZU1hdGNoUHVzaBCD",
            "IBIZChRjbG9zZU1hdGNoUmVtaW5kUHVzaBCEIBITCg5zdGFydE1hdGNoUHVz",
            "aBCFIEIWWhRwb2tlci9wYi9wYmNtZDtwYmNtZA=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pbcmd.PBMainCmd), typeof(global::Pbcmd.PBMainCmdHeartBeatSubCmd), typeof(global::Pbcmd.PBMainCmdAccessSubCmd), typeof(global::Pbcmd.PBMainCmdAccountSubCmd), typeof(global::Pbcmd.PBMainCmdGuessSubCmd), typeof(global::Pbcmd.PBMainCmdWeiboSubCmd), typeof(global::Pbcmd.PBMainCmdRankSubCmd), typeof(global::Pbcmd.PBMainCmdPromoSubCmd), typeof(global::Pbcmd.PBMainCmdMallSubCmd), typeof(global::Pbcmd.PBMainCmdTexasSubCmd), typeof(global::Pbcmd.PBMainCmdShortSubCmd), typeof(global::Pbcmd.PBMainCmdMatchListSubCmd), typeof(global::Pbcmd.PBMainCmdGLogSubCmd), typeof(global::Pbcmd.PBMainCmdNotifySubCmd), typeof(global::Pbcmd.PBMainCmdHunTexasSubCmd), typeof(global::Pbcmd.PBMainCmdChatSubCmd), typeof(global::Pbcmd.Poker), typeof(global::Pbcmd.MatchMgr), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbcmd.PBHeader), global::Pbcmd.PBHeader.Parser, new[]{ "MainCmd", "SubCmd", "Encrypt", "ClientCtx", "Idx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbcmd.PBMatchIndex), global::Pbcmd.PBMatchIndex.Parser, new[]{ "SvrID", "MatchID", "GameType", "Kind", "Tid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbcmd.PBCommParam), global::Pbcmd.PBCommParam.Parser, new[]{ "Cid", "Uid", "Token", "Version", "Channel", "Lang", "Device", "PkgName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbcmd.PBDeviceInfo), global::Pbcmd.PBDeviceInfo.Parser, new[]{ "Network", "OsType", "OsVersion", "DeviceType", "Imei", "MacAddr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbcmd.PBCommResult), global::Pbcmd.PBCommResult.Parser, new[]{ "Code", "Desc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbcmd.PBHearBeat), global::Pbcmd.PBHearBeat.Parser, new[]{ "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbcmd.PBServiceNotFound), global::Pbcmd.PBServiceNotFound.Parser, new[]{ "SvrType", "ClientCtx", "MainCmd", "SubCmd", "Reason" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PBMainCmd {
    /// <summary>
    ///用于心跳
    /// </summary>
    [pbr::OriginalName("MCmd_HeartBeat")] McmdHeartBeat = 0,
    /// <summary>
    ///用于账号相关
    /// </summary>
    [pbr::OriginalName("MCmd_Account")] McmdAccount = 1,
    /// <summary>
    ///用于竞猜业务
    /// </summary>
    [pbr::OriginalName("MCmd_Guess")] McmdGuess = 2,
    /// <summary>
    ///用于德州业务
    /// </summary>
    [pbr::OriginalName("MCmd_Texas")] McmdTexas = 3,
    /// <summary>
    ///用于房间列表，加入房间
    /// </summary>
    [pbr::OriginalName("MCmd_MatchList")] McmdMatchList = 4,
    /// <summary>
    ///用于俱乐部业务
    /// </summary>
    [pbr::OriginalName("MCmd_Club")] McmdClub = 5,
    /// <summary>
    ///用于牌局日志
    /// </summary>
    [pbr::OriginalName("MCmd_Gamelog")] McmdGamelog = 6,
    /// <summary>
    ///用于扑克圏
    /// </summary>
    [pbr::OriginalName("MCmd_Weibo")] McmdWeibo = 7,
    /// <summary>
    ///用于排行榜
    /// </summary>
    [pbr::OriginalName("MCmd_Rank")] McmdRank = 8,
    /// <summary>
    ///用于商城
    /// </summary>
    [pbr::OriginalName("MCmd_Mall")] McmdMall = 9,
    /// <summary>
    ///用于活动类
    /// </summary>
    [pbr::OriginalName("MCmd_Promo")] McmdPromo = 10,
    /// <summary>
    ///用于通知类
    /// </summary>
    [pbr::OriginalName("MCmd_Notification")] McmdNotification = 11,
    /// <summary>
    ///用于百人德州业务
    /// </summary>
    [pbr::OriginalName("MCmd_HunTexas")] McmdHunTexas = 12,
    /// <summary>
    /// 短牌服
    /// </summary>
    [pbr::OriginalName("MCmd_Short")] McmdShort = 14,
    /// <summary>
    /// 代理
    /// </summary>
    [pbr::OriginalName("MCmd_Agent")] McmdAgent = 15,
    /// <summary>
    /// 支付
    /// </summary>
    [pbr::OriginalName("MCmd_Pay")] McmdPay = 16,
    /// <summary>
    /// 重构的服务(subcmd 为0即可)
    /// </summary>
    [pbr::OriginalName("MCmd_PKT")] McmdPkt = 17,
    /// <summary>
    /// 新的玩牌逻辑
    /// </summary>
    [pbr::OriginalName("MCmd_Poker")] McmdPoker = 18,
    /// <summary>
    /// 新的俱乐部业务
    /// </summary>
    [pbr::OriginalName("MCmd_ClubNew")] McmdClubNew = 19,
    /// <summary>
    /// 聊天服
    /// </summary>
    [pbr::OriginalName("MCmd_Chat")] McmdChat = 20,
    /// <summary>
    /// 联盟业务
    /// </summary>
    [pbr::OriginalName("MCmd_Union")] McmdUnion = 21,
    /// <summary>
    /// 新的牌局管理
    /// </summary>
    [pbr::OriginalName("MCmd_MatchMgr")] McmdMatchMgr = 22,
    /// <summary>
    /// 幸运牌
    /// </summary>
    [pbr::OriginalName("MCmd_LuckyCard")] McmdLuckyCard = 23,
    /// <summary>
    /// profile管理, 用户信息，钱包等
    /// </summary>
    [pbr::OriginalName("MCmd_Profile")] McmdProfile = 24,
    /// <summary>
    /// 幸运牌(扑克币)
    /// </summary>
    [pbr::OriginalName("MCmd_LuckyCardPkc")] McmdLuckyCardPkc = 25,
    /// <summary>
    ///Server用
    /// </summary>
    [pbr::OriginalName("MCmd_Access")] McmdAccess = 4097,
    /// <summary>
    ///用于状态服
    /// </summary>
    [pbr::OriginalName("MCmd_State")] McmdState = 4098,
    /// <summary>
    ///用于统计服
    /// </summary>
    [pbr::OriginalName("MCmd_Statistic")] McmdStatistic = 4099,
    /// <summary>
    ///用于监控
    /// </summary>
    [pbr::OriginalName("MCmd_Monitor")] McmdMonitor = 57345,
  }

  public enum PBMainCmdHeartBeatSubCmd {
    [pbr::OriginalName("HB_Send")] HbSend = 1,
    [pbr::OriginalName("HB_Response")] HbResponse = 2,
  }

  public enum PBMainCmdAccessSubCmd {
    [pbr::OriginalName("ServiceNotFound")] ServiceNotFound = 1,
    [pbr::OriginalName("Access_ReqLogout")] AccessReqLogout = 4097,
    [pbr::OriginalName("Access_RespLogout")] AccessRespLogout = 4098,
  }

  /// <summary>
  ///账号类子命令字
  /// </summary>
  public enum PBMainCmdAccountSubCmd {
    /// <summary>
    ///登录请求
    /// </summary>
    [pbr::OriginalName("Account_ReqLogin")] AccountReqLogin = 1,
    [pbr::OriginalName("Account_RespLogin")] AccountRespLogin = 2,
    /// <summary>
    ///用户信息请求
    /// </summary>
    [pbr::OriginalName("Account_ReqInfo")] AccountReqInfo = 3,
    [pbr::OriginalName("Account_RespInfo")] AccountRespInfo = 4,
    /// <summary>
    ///用户信息修改
    /// </summary>
    [pbr::OriginalName("Account_ReqModifyInfo")] AccountReqModifyInfo = 5,
    [pbr::OriginalName("Account_RespModifyInfo")] AccountRespModifyInfo = 6,
    /// <summary>
    /// 判断本次改名是否需要收费
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountIsChargeChangeName")] AccountReqAccountIsChargeChangeName = 117,
    [pbr::OriginalName("Account_RespAccountIsChargeChangeName")] AccountRespAccountIsChargeChangeName = 118,
    /// <summary>
    ///获取手机验证码
    /// </summary>
    [pbr::OriginalName("Account_ReqMobileCode")] AccountReqMobileCode = 7,
    [pbr::OriginalName("Account_RespMobileCode")] AccountRespMobileCode = 8,
    /// <summary>
    ///手机号码注册或验证码或密码登录
    /// </summary>
    [pbr::OriginalName("Account_ReqMobileAuth")] AccountReqMobileAuth = 9,
    [pbr::OriginalName("Account_RespMobileAuth")] AccountRespMobileAuth = 10,
    /// <summary>
    ///重置密码
    /// </summary>
    [pbr::OriginalName("Account_ReqMobileRepwd")] AccountReqMobileRepwd = 11,
    [pbr::OriginalName("Account_RespMobileRepwd")] AccountRespMobileRepwd = 12,
    /// <summary>
    /// 验证码验证
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountCheckCode")] AccountReqAccountCheckCode = 115,
    [pbr::OriginalName("Account_RespAccountCheckCode")] AccountRespAccountCheckCode = 116,
    /// <summary>
    ///微信登录
    /// </summary>
    [pbr::OriginalName("Account_ReqWeixinAuth")] AccountReqWeixinAuth = 13,
    [pbr::OriginalName("Account_RespWeixinAuth")] AccountRespWeixinAuth = 14,
    /// <summary>
    ///密码临时密钥
    /// </summary>
    [pbr::OriginalName("Account_ReqMobileSecret")] AccountReqMobileSecret = 15,
    [pbr::OriginalName("Account_RespMobileSecret")] AccountRespMobileSecret = 16,
    /// <summary>
    ///获取用户资产
    /// </summary>
    [pbr::OriginalName("Account_ReqMoney")] AccountReqMoney = 17,
    [pbr::OriginalName("Account_RespMoney")] AccountRespMoney = 18,
    /// <summary>
    ///获取用户文件上传参数
    /// </summary>
    [pbr::OriginalName("Account_ReqOssParam")] AccountReqOssParam = 19,
    [pbr::OriginalName("Account_RespOssParam")] AccountRespOssParam = 20,
    /// <summary>
    ///获取用户道具列表
    /// </summary>
    [pbr::OriginalName("Account_ReqUserProps")] AccountReqUserProps = 21,
    [pbr::OriginalName("Account_RespUserProps")] AccountRespUserProps = 22,
    /// <summary>
    ///上报(更新)设备TOKEN
    /// </summary>
    [pbr::OriginalName("Account_ReqSetDeviceToken")] AccountReqSetDeviceToken = 23,
    [pbr::OriginalName("Account_RespSetDeviceToken")] AccountRespSetDeviceToken = 24,
    /// <summary>
    ///用户反馈
    /// </summary>
    [pbr::OriginalName("Account_ReqFeedback")] AccountReqFeedback = 25,
    [pbr::OriginalName("Account_RespFeedback")] AccountRespFeedback = 26,
    /// <summary>
    ///上报(更新)设备地理位置
    /// </summary>
    [pbr::OriginalName("Account_ReqSetLocation")] AccountReqSetLocation = 27,
    [pbr::OriginalName("Account_RespSetLocation")] AccountRespSetLocation = 28,
    /// <summary>
    ///获取用户语音服务签名
    /// </summary>
    [pbr::OriginalName("Account_ReqGetAvcSign")] AccountReqGetAvcSign = 29,
    [pbr::OriginalName("Account_RespGetAvcSign")] AccountRespGetAvcSign = 30,
    /// <summary>
    ///预登录接口
    /// </summary>
    [pbr::OriginalName("Account_ReqPrelogin")] AccountReqPrelogin = 31,
    [pbr::OriginalName("Account_RespPrelogin")] AccountRespPrelogin = 32,
    /// <summary>
    ///用户黑名单列表
    /// </summary>
    [pbr::OriginalName("Account_ReqBlackList")] AccountReqBlackList = 33,
    [pbr::OriginalName("Account_RespBlackList")] AccountRespBlackList = 34,
    /// <summary>
    ///用户黑名单编辑(添加/移除)
    /// </summary>
    [pbr::OriginalName("Account_ReqBlackEdit")] AccountReqBlackEdit = 35,
    [pbr::OriginalName("Account_RespBlackEdit")] AccountRespBlackEdit = 36,
    /// <summary>
    ///用户黑名单用户数
    /// </summary>
    [pbr::OriginalName("Account_ReqBlackCount")] AccountReqBlackCount = 37,
    [pbr::OriginalName("Account_RespBlackCount")] AccountRespBlackCount = 38,
    /// <summary>
    ///华为登录
    /// </summary>
    [pbr::OriginalName("Account_ReqHuaweiAuth")] AccountReqHuaweiAuth = 39,
    [pbr::OriginalName("Account_RespHuaweiAuth")] AccountRespHuaweiAuth = 40,
    /// <summary>
    ///Oppo登录
    /// </summary>
    [pbr::OriginalName("Account_ReqOppoAuth")] AccountReqOppoAuth = 43,
    [pbr::OriginalName("Account_RespOppoAuth")] AccountRespOppoAuth = 44,
    /// <summary>
    ///Vivo登录
    /// </summary>
    [pbr::OriginalName("Account_ReqVivoAuth")] AccountReqVivoAuth = 45,
    [pbr::OriginalName("Account_RespVivoAuth")] AccountRespVivoAuth = 46,
    /// <summary>
    ///微信小游戏登录
    /// </summary>
    [pbr::OriginalName("Account_ReqWxGameAuth")] AccountReqWxGameAuth = 47,
    [pbr::OriginalName("Account_RespWxGameAuth")] AccountRespWxGameAuth = 48,
    /// <summary>
    /// VHKD
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiVhkdLogIn")] AccountReqAccountVhkdapiVhkdLogIn = 49,
    [pbr::OriginalName("Account_RespAccountVhkdapiVhkdLogIn")] AccountRespAccountVhkdapiVhkdLogIn = 50,
    /// <summary>
    /// vhkd设置PIN
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiVhkdSetPin")] AccountReqAccountVhkdapiVhkdSetPin = 51,
    [pbr::OriginalName("Account_RespAccountVhkdapiVhkdSetPin")] AccountRespAccountVhkdapiVhkdSetPin = 52,
    /// <summary>
    /// vhkd查询用户资产
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiVhkdGetAssets")] AccountReqAccountVhkdapiVhkdGetAssets = 53,
    [pbr::OriginalName("Account_RespAccountVhkdapiVhkdGetAssets")] AccountRespAccountVhkdapiVhkdGetAssets = 54,
    /// <summary>
    /// vhkd用户资产转入转出
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiUpdateAssets")] AccountReqAccountVhkdapiUpdateAssets = 55,
    [pbr::OriginalName("Account_RespAccountVhkdapiUpdateAssets")] AccountRespAccountVhkdapiUpdateAssets = 56,
    /// <summary>
    /// 查询vhkd与金币兑换记录
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiGetFlowList")] AccountReqAccountVhkdapiGetFlowList = 57,
    [pbr::OriginalName("Account_RespAccountVhkdapiGetFlowList")] AccountRespAccountVhkdapiGetFlowList = 58,
    /// <summary>
    /// 查询vhkd pin
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiVhkdIsHasPin")] AccountReqAccountVhkdapiVhkdIsHasPin = 59,
    [pbr::OriginalName("Account_RespAccountVhkdapiVhkdIsHasPin")] AccountRespAccountVhkdapiVhkdIsHasPin = 60,
    /// <summary>
    /// 查询webview开关
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiVhkdwebViewControl")] AccountReqAccountVhkdapiVhkdwebViewControl = 61,
    [pbr::OriginalName("Account_RespAccountVhkdapiVhkdwebViewControl")] AccountRespAccountVhkdapiVhkdwebViewControl = 62,
    /// <summary>
    /// 查询数字货币商城开关
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiDigitalMoneyMallControl")] AccountReqAccountVhkdapiDigitalMoneyMallControl = 74,
    [pbr::OriginalName("Account_RespAccountVhkdapiDigitalMoneyMallControl")] AccountRespAccountVhkdapiDigitalMoneyMallControl = 75,
    /// <summary>
    /// 查询BTC和VHKD的汇率
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiGetBTCExchangeRate")] AccountReqAccountVhkdapiGetBtcexchangeRate = 65,
    [pbr::OriginalName("Account_RespAccountVhkdapiGetBTCExchangeRate")] AccountRespAccountVhkdapiGetBtcexchangeRate = 66,
    /// <summary>
    /// vhkd or btc 获取兑换最大最小值限制
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiGetConfig")] AccountReqAccountVhkdapiGetConfig = 69,
    [pbr::OriginalName("Account_RespAccountVhkdapiGetConfig")] AccountRespAccountVhkdapiGetConfig = 70,
    /// <summary>
    /// 用户间金币赠送
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVhkdapiGiveMoney")] AccountReqAccountVhkdapiGiveMoney = 73,
    [pbr::OriginalName("Account_RespAccountVhkdapiGiveMoney")] AccountRespAccountVhkdapiGiveMoney = 80,
    /// <summary>
    /// 获取用户间金币赠送记录
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountGetRecordLog")] AccountReqAccountGetRecordLog = 84,
    [pbr::OriginalName("Account_RespAccountGetRecordLog")] AccountRespAccountGetRecordLog = 85,
    /// <summary>
    /// 游戏币 &lt;=> 数字货币 兑换
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVGPayUpdateAssets")] AccountReqAccountVgpayUpdateAssets = 86,
    [pbr::OriginalName("Account_RespAccountVGPayUpdateAssets")] AccountRespAccountVgpayUpdateAssets = 87,
    /// <summary>
    /// 获取充币地址
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVGPayGetAddress")] AccountReqAccountVgpayGetAddress = 88,
    [pbr::OriginalName("Account_RespAccountVGPayGetAddress")] AccountRespAccountVgpayGetAddress = 89,
    /// <summary>
    /// 获取提币配置
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVGPayGetWithdrawConfig")] AccountReqAccountVgpayGetWithdrawConfig = 90,
    [pbr::OriginalName("Account_RespAccountVGPayGetWithdrawConfig")] AccountRespAccountVgpayGetWithdrawConfig = 91,
    /// <summary>
    /// 提交提币申请
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVGPayApplyTransactionOut")] AccountReqAccountVgpayApplyTransactionOut = 92,
    [pbr::OriginalName("Account_RespAccountVGPayApplyTransactionOut")] AccountRespAccountVgpayApplyTransactionOut = 93,
    /// <summary>
    /// 获取冲提币记录
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVGPayGetAssetsRecordPageList")] AccountReqAccountVgpayGetAssetsRecordPageList = 94,
    [pbr::OriginalName("Account_RespAccountVGPayGetAssetsRecordPageList")] AccountRespAccountVgpayGetAssetsRecordPageList = 95,
    /// <summary>
    /// VHKD 自动兑换为 Money
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountVGPayVhkdToMoney")] AccountReqAccountVgpayVhkdToMoney = 112,
    [pbr::OriginalName("Account_RespAccountVGPayVhkdToMoney")] AccountRespAccountVgpayVhkdToMoney = 113,
    /// <summary>
    /// FtPay
    /// </summary>
    [pbr::OriginalName("Ftpay_ReqFtpayGetPayList")] FtpayReqFtpayGetPayList = 96,
    [pbr::OriginalName("Ftpay_RespFtpayGetPayList")] FtpayRespFtpayGetPayList = 97,
    /// <summary>
    /// ftpay提交支付请求
    /// </summary>
    [pbr::OriginalName("Ftpay_ReqFtpayPaySubmitAct")] FtpayReqFtpayPaySubmitAct = 98,
    [pbr::OriginalName("Ftpay_RespFtpayPaySubmitAct")] FtpayRespFtpayPaySubmitAct = 99,
    /// <summary>
    /// ftpay用户发起提现申请-获取收款银行ID
    /// </summary>
    [pbr::OriginalName("Ftpay_ReqFtpayGetBaId")] FtpayReqFtpayGetBaId = 100,
    [pbr::OriginalName("Ftpay_RespFtpayGetBaId")] FtpayRespFtpayGetBaId = 101,
    /// <summary>
    /// ftpay用户发起提现申请
    /// </summary>
    [pbr::OriginalName("Ftpay_ReqFtpayLaunchWithdraw")] FtpayReqFtpayLaunchWithdraw = 102,
    [pbr::OriginalName("Ftpay_RespFtpayLaunchWithdraw")] FtpayRespFtpayLaunchWithdraw = 103,
    /// <summary>
    /// 获取流水列表
    /// </summary>
    [pbr::OriginalName("Ftpay_ReqFtpayGetFlowList")] FtpayReqFtpayGetFlowList = 104,
    [pbr::OriginalName("Ftpay_RespFtpayGetFlowList")] FtpayRespFtpayGetFlowList = 105,
    /// <summary>
    /// 获取用户上一次提现的银行卡信息
    /// </summary>
    [pbr::OriginalName("Ftpay_ReqFtpayGetHistoryCardInfo")] FtpayReqFtpayGetHistoryCardInfo = 108,
    [pbr::OriginalName("Ftpay_RespFtpayGetHistoryCardInfo")] FtpayRespFtpayGetHistoryCardInfo = 109,
    /// <summary>
    /// 获取支付通道状态
    /// </summary>
    [pbr::OriginalName("Ftpay_ReqGetPayStatus")] FtpayReqGetPayStatus = 110,
    [pbr::OriginalName("Ftpay_RespGetPayStatus")] FtpayRespGetPayStatus = 111,
    /// <summary>
    /// 用户发起提现金申请
    /// </summary>
    [pbr::OriginalName("Ftpay_ReqFtpayGetLaunchWithdrawFee")] FtpayReqFtpayGetLaunchWithdrawFee = 119,
    [pbr::OriginalName("Ftpay_RespFtpayGetLaunchWithdrawFee")] FtpayRespFtpayGetLaunchWithdrawFee = 120,
    /// <summary>
    /// 验证PIN
    /// </summary>
    [pbr::OriginalName("Ftpay_ReqCheckPIN")] FtpayReqCheckPin = 106,
    [pbr::OriginalName("Ftpay_RespCheckPIN")] FtpayRespCheckPin = 107,
    /// <summary>
    /// 绑定手机号码 or 邮箱
    /// </summary>
    [pbr::OriginalName("Account_ReqAccountCheckPhoneOrEmail")] AccountReqAccountCheckPhoneOrEmail = 81,
    [pbr::OriginalName("Account_RespAccountCheckPhoneOrEmail")] AccountRespAccountCheckPhoneOrEmail = 82,
    /// <summary>
    /// 获取随机默认头像
    /// </summary>
    [pbr::OriginalName("Account_ReqGetAutoHeadImg")] AccountReqGetAutoHeadImg = 128,
    [pbr::OriginalName("Account_RespGetAutoHeadImg")] AccountRespGetAutoHeadImg = 129,
    /// <summary>
    /// 验证当前渠道版本是否处于支付禁用中
    /// </summary>
    [pbr::OriginalName("Account_ReqCheckPayDisable")] AccountReqCheckPayDisable = 130,
    [pbr::OriginalName("Account_RespCheckPayDisable")] AccountRespCheckPayDisable = 131,
    /// <summary>
    ///服务器踢出用户
    /// </summary>
    [pbr::OriginalName("Account_KickUser")] AccountKickUser = 61440,
  }

  /// <summary>
  ///竞猜类子命令字
  /// </summary>
  public enum PBMainCmdGuessSubCmd {
    /// <summary>
    ///@deprecated 老版本列表请求, 新版请用 Guess_ReqInfoList
    /// </summary>
    [pbr::OriginalName("Guess_ReqList")] GuessReqList = 1,
    [pbr::OriginalName("Guess_RespList")] GuessRespList = 2,
    /// <summary>
    ///详情请求
    /// </summary>
    [pbr::OriginalName("Guess_ReqInfo")] GuessReqInfo = 3,
    [pbr::OriginalName("Guess_RespInfo")] GuessRespInfo = 4,
    /// <summary>
    ///竞猜请求
    /// </summary>
    [pbr::OriginalName("Guess_ReqMake")] GuessReqMake = 5,
    [pbr::OriginalName("Guess_RespMake")] GuessRespMake = 6,
    /// <summary>
    ///竞猜者列表请求
    /// </summary>
    [pbr::OriginalName("Guess_ReqGuesserList")] GuessReqGuesserList = 7,
    [pbr::OriginalName("Guess_RespGuesserList")] GuessRespGuesserList = 8,
    /// <summary>
    ///获取竞猜新闻列表
    /// </summary>
    [pbr::OriginalName("Guess_ReqNewsList")] GuessReqNewsList = 9,
    [pbr::OriginalName("Guess_RespNewsList")] GuessRespNewsList = 10,
    /// <summary>
    ///获取选手个人成绩列表
    /// </summary>
    [pbr::OriginalName("Guess_ReqStarMarkList")] GuessReqStarMarkList = 11,
    [pbr::OriginalName("Guess_RespStarMarkList")] GuessRespStarMarkList = 12,
    /// <summary>
    ///点赞新闻、评论等
    /// </summary>
    [pbr::OriginalName("Guess_ReqPraise")] GuessReqPraise = 13,
    [pbr::OriginalName("Guess_RespPraise")] GuessRespPraise = 14,
    /// <summary>
    ///评论提交
    /// </summary>
    [pbr::OriginalName("Guess_ReqReview")] GuessReqReview = 15,
    [pbr::OriginalName("Guess_RespReview")] GuessRespReview = 16,
    /// <summary>
    ///评论列表
    /// </summary>
    [pbr::OriginalName("Guess_ReqReviewList")] GuessReqReviewList = 17,
    [pbr::OriginalName("Guess_RespReviewList")] GuessRespReviewList = 18,
    /// <summary>
    ///举报评论
    /// </summary>
    [pbr::OriginalName("Guess_ReqReportReview")] GuessReqReportReview = 19,
    [pbr::OriginalName("Guess_RespReportReview")] GuessRespReportReview = 20,
    /// <summary>
    ///我的竞猜记录
    /// </summary>
    [pbr::OriginalName("Guess_ReqRecordList")] GuessReqRecordList = 21,
    [pbr::OriginalName("Guess_RespRecordList")] GuessRespRecordList = 22,
    /// <summary>
    ///我的竞猜通知(获赞或评论通知列表)
    /// </summary>
    [pbr::OriginalName("Guess_ReqNotifyList")] GuessReqNotifyList = 23,
    [pbr::OriginalName("Guess_RespNotifyList")] GuessRespNotifyList = 24,
    /// <summary>
    ///读取竞猜通知内容(获赞或评论列表)
    /// </summary>
    [pbr::OriginalName("Guess_ReqNotifyRead")] GuessReqNotifyRead = 25,
    [pbr::OriginalName("Guess_RespNotifyRead")] GuessRespNotifyRead = 26,
    /// <summary>
    ///赞过的人
    /// </summary>
    [pbr::OriginalName("Guess_ReqPraisers")] GuessReqPraisers = 27,
    [pbr::OriginalName("Guess_RespPraisers")] GuessRespPraisers = 28,
    /// <summary>
    ///我的竞猜通知(普通消息列表)
    /// </summary>
    [pbr::OriginalName("Guess_ReqMessageList")] GuessReqMessageList = 29,
    [pbr::OriginalName("Guess_RespMessageList")] GuessRespMessageList = 30,
    /// <summary>
    ///读取竞猜通知内容(普通消息内容)
    /// </summary>
    [pbr::OriginalName("Guess_ReqMessageRead")] GuessReqMessageRead = 31,
    [pbr::OriginalName("Guess_RespMessageRead")] GuessRespMessageRead = 32,
    /// <summary>
    ///获取竞猜新闻详情
    /// </summary>
    [pbr::OriginalName("Guess_ReqNews")] GuessReqNews = 33,
    [pbr::OriginalName("Guess_RespNews")] GuessRespNews = 34,
    /// <summary>
    ///扑克竞猜列表
    /// </summary>
    [pbr::OriginalName("Guess_ReqPokerList")] GuessReqPokerList = 35,
    [pbr::OriginalName("Guess_RespPokerList")] GuessRespPokerList = 36,
    /// <summary>
    ///扑克竞猜请求
    /// </summary>
    [pbr::OriginalName("Guess_ReqPokerMake")] GuessReqPokerMake = 37,
    [pbr::OriginalName("Guess_RespPokerMake")] GuessRespPokerMake = 38,
    /// <summary>
    ///扑克竞猜记录
    /// </summary>
    [pbr::OriginalName("Guess_ReqPokerRecordList")] GuessReqPokerRecordList = 39,
    [pbr::OriginalName("Guess_RespPokerRecordList")] GuessRespPokerRecordList = 40,
    /// <summary>
    ///扑克竞猜详情
    /// </summary>
    [pbr::OriginalName("Guess_ReqPokerRecordInfo")] GuessReqPokerRecordInfo = 41,
    [pbr::OriginalName("Guess_RespPokerRecordInfo")] GuessRespPokerRecordInfo = 42,
    /// <summary>
    ///列表请求
    /// </summary>
    [pbr::OriginalName("Guess_ReqInfoList")] GuessReqInfoList = 43,
    [pbr::OriginalName("Guess_RespInfoList")] GuessRespInfoList = 44,
  }

  /// <summary>
  ///扑克圏子命令字
  /// </summary>
  public enum PBMainCmdWeiboSubCmd {
    /// <summary>
    ///当前用户主页
    /// </summary>
    [pbr::OriginalName("Weibo_ReqHome")] WeiboReqHome = 1,
    [pbr::OriginalName("Weibo_RespHome")] WeiboRespHome = 2,
    /// <summary>
    ///用户主页
    /// </summary>
    [pbr::OriginalName("Weibo_ReqProfile")] WeiboReqProfile = 3,
    [pbr::OriginalName("Weibo_RespProfile")] WeiboRespProfile = 4,
    /// <summary>
    ///发布微博
    /// </summary>
    [pbr::OriginalName("Weibo_ReqPublish")] WeiboReqPublish = 5,
    [pbr::OriginalName("Weibo_RespPublish")] WeiboRespPublish = 6,
    /// <summary>
    ///删除微博
    /// </summary>
    [pbr::OriginalName("Weibo_ReqRemove")] WeiboReqRemove = 7,
    [pbr::OriginalName("Weibo_RespRemove")] WeiboRespRemove = 8,
    /// <summary>
    ///微博列表
    /// </summary>
    [pbr::OriginalName("Weibo_ReqList")] WeiboReqList = 9,
    [pbr::OriginalName("Weibo_RespList")] WeiboRespList = 10,
    /// <summary>
    ///点赞微博、评论等
    /// </summary>
    [pbr::OriginalName("Weibo_ReqPraise")] WeiboReqPraise = 11,
    [pbr::OriginalName("Weibo_RespPraise")] WeiboRespPraise = 12,
    /// <summary>
    ///评论提交
    /// </summary>
    [pbr::OriginalName("Weibo_ReqReview")] WeiboReqReview = 13,
    [pbr::OriginalName("Weibo_RespReview")] WeiboRespReview = 14,
    /// <summary>
    ///转发微博
    /// </summary>
    [pbr::OriginalName("Weibo_ReqRelay")] WeiboReqRelay = 15,
    [pbr::OriginalName("Weibo_RespRelay")] WeiboRespRelay = 16,
    /// <summary>
    ///用户举报
    /// </summary>
    [pbr::OriginalName("Weibo_ReqReport")] WeiboReqReport = 17,
    [pbr::OriginalName("Weibo_RespReport")] WeiboRespReport = 18,
    /// <summary>
    ///评论列表
    /// </summary>
    [pbr::OriginalName("Weibo_ReqReviewList")] WeiboReqReviewList = 19,
    [pbr::OriginalName("Weibo_RespReviewList")] WeiboRespReviewList = 20,
    /// <summary>
    ///获取用户关系列表(关注,粉丝)
    /// </summary>
    [pbr::OriginalName("Weibo_ReqRelationList")] WeiboReqRelationList = 21,
    [pbr::OriginalName("Weibo_RespRelationList")] WeiboRespRelationList = 22,
    /// <summary>
    ///微博详情
    /// </summary>
    [pbr::OriginalName("Weibo_ReqFeed")] WeiboReqFeed = 23,
    [pbr::OriginalName("Weibo_RespFeed")] WeiboRespFeed = 24,
    /// <summary>
    ///赞过的人
    /// </summary>
    [pbr::OriginalName("Weibo_ReqPraisers")] WeiboReqPraisers = 25,
    [pbr::OriginalName("Weibo_RespPraisers")] WeiboRespPraisers = 26,
    /// <summary>
    ///通知列表
    /// </summary>
    [pbr::OriginalName("Weibo_ReqNotifyList")] WeiboReqNotifyList = 27,
    [pbr::OriginalName("Weibo_RespNotifyList")] WeiboRespNotifyList = 28,
    /// <summary>
    ///关注/取消关注
    /// </summary>
    [pbr::OriginalName("Weibo_ReqRelationFollow")] WeiboReqRelationFollow = 29,
    [pbr::OriginalName("Weibo_RespRelationFollow")] WeiboRespRelationFollow = 30,
    /// <summary>
    ///获取关系类型
    /// </summary>
    [pbr::OriginalName("Weibo_ReqRelation")] WeiboReqRelation = 31,
    [pbr::OriginalName("Weibo_RespRelation")] WeiboRespRelation = 32,
    /// <summary>
    ///删除评论
    /// </summary>
    [pbr::OriginalName("Weibo_ReqRemoveReview")] WeiboReqRemoveReview = 33,
    [pbr::OriginalName("Weibo_RespRemoveReview")] WeiboRespRemoveReview = 34,
    /// <summary>
    ///热门用户
    /// </summary>
    [pbr::OriginalName("Weibo_ReqHotUsers")] WeiboReqHotUsers = 35,
    [pbr::OriginalName("Weibo_RespHotUsers")] WeiboRespHotUsers = 36,
  }

  public enum PBMainCmdRankSubCmd {
    [pbr::OriginalName("Rank_ReqList")] RankReqList = 1,
    [pbr::OriginalName("Rank_RespList")] RankRespList = 2,
  }

  /// <summary>
  ///活动类子命令
  /// </summary>
  public enum PBMainCmdPromoSubCmd {
    [pbr::OriginalName("Promo_ReqProfile")] PromoReqProfile = 1,
    [pbr::OriginalName("Promo_RespProfile")] PromoRespProfile = 2,
    /// <summary>
    ///发现-俱乐部列表
    /// </summary>
    [pbr::OriginalName("Promo_ReqClubList")] PromoReqClubList = 3,
    [pbr::OriginalName("Promo_RespClubList")] PromoRespClubList = 4,
    /// <summary>
    ///分享链接获取
    /// </summary>
    [pbr::OriginalName("Promo_ReqShareUrl")] PromoReqShareUrl = 5,
    [pbr::OriginalName("Promo_RespShareUrl")] PromoRespShareUrl = 6,
    /// <summary>
    ///通知(公告)类列表
    /// </summary>
    [pbr::OriginalName("Promo_ReqNotifyList")] PromoReqNotifyList = 7,
    [pbr::OriginalName("Promo_RespNotifyList")] PromoRespNotifyList = 8,
    /// <summary>
    ///读取通知(公告)类信息
    /// </summary>
    [pbr::OriginalName("Promo_ReqNotifyRead")] PromoReqNotifyRead = 9,
    [pbr::OriginalName("Promo_RespNotifyRead")] PromoRespNotifyRead = 10,
    /// <summary>
    ///获取一些APP用的设置
    /// </summary>
    [pbr::OriginalName("Promo_ReqAppSettings")] PromoReqAppSettings = 11,
    [pbr::OriginalName("Promo_RespAppSettings")] PromoRespAppSettings = 12,
    /// <summary>
    ///领取破产救济
    /// </summary>
    [pbr::OriginalName("Promo_ReqRelief")] PromoReqRelief = 13,
    [pbr::OriginalName("Promo_RespRelief")] PromoRespRelief = 14,
    /// <summary>
    ///获取用户当前宝箱信息
    /// </summary>
    [pbr::OriginalName("Promo_ReqLuckyboxGet")] PromoReqLuckyboxGet = 15,
    [pbr::OriginalName("Promo_RespLuckyboxGet")] PromoRespLuckyboxGet = 16,
    /// <summary>
    ///开宝箱
    /// </summary>
    [pbr::OriginalName("Promo_ReqLuckyboxOpen")] PromoReqLuckyboxOpen = 17,
    [pbr::OriginalName("Promo_RespLuckyboxOpen")] PromoRespLuckyboxOpen = 18,
    /// <summary>
    ///通知奖励领取
    /// </summary>
    [pbr::OriginalName("Promo_ReqNotifyAward")] PromoReqNotifyAward = 19,
    [pbr::OriginalName("Promo_RespNotifyAward")] PromoRespNotifyAward = 20,
    /// <summary>
    ///活动列表
    /// </summary>
    [pbr::OriginalName("Promo_ReqActivityList")] PromoReqActivityList = 21,
    [pbr::OriginalName("Promo_RespActivityList")] PromoRespActivityList = 22,
    /// <summary>
    ///活动领奖
    /// </summary>
    [pbr::OriginalName("Promo_ReqActivityAward")] PromoReqActivityAward = 23,
    [pbr::OriginalName("Promo_RespActivityAward")] PromoRespActivityAward = 24,
    /// <summary>
    ///自动重启
    /// </summary>
    [pbr::OriginalName("Promo_ReqAutoRestart")] PromoReqAutoRestart = 25,
    [pbr::OriginalName("Promo_RespAutoRestart")] PromoRespAutoRestart = 26,
    /// <summary>
    ///获取发现列表
    /// </summary>
    [pbr::OriginalName("Promo_ReqGetFoundOnlineList")] PromoReqGetFoundOnlineList = 27,
    [pbr::OriginalName("Promo_RespGetFoundOnlineList")] PromoRespGetFoundOnlineList = 28,
  }

  public enum PBMainCmdMallSubCmd {
    /// <summary>
    ///商品列表
    /// </summary>
    [pbr::OriginalName("Mall_ReqList")] MallReqList = 1,
    [pbr::OriginalName("Mall_RespList")] MallRespList = 2,
    /// <summary>
    ///苹果支付请求下单
    /// </summary>
    [pbr::OriginalName("Mall_ReqApplePayCreate")] MallReqApplePayCreate = 3,
    [pbr::OriginalName("Mall_RespApplePayCreate")] MallRespApplePayCreate = 4,
    /// <summary>
    ///苹果支付请求发货
    /// </summary>
    [pbr::OriginalName("Mall_ReqApplePayDeliver")] MallReqApplePayDeliver = 5,
    [pbr::OriginalName("Mall_RespApplePayDeliver")] MallRespApplePayDeliver = 6,
    /// <summary>
    ///购买道具
    /// </summary>
    [pbr::OriginalName("Mall_ReqPropBuy")] MallReqPropBuy = 7,
    [pbr::OriginalName("Mall_RespPropBuy")] MallRespPropBuy = 8,
    /// <summary>
    ///微信支付请求下单
    /// </summary>
    [pbr::OriginalName("Mall_ReqWeixinPayCreate")] MallReqWeixinPayCreate = 9,
    [pbr::OriginalName("Mall_RespWeixinPayCreate")] MallRespWeixinPayCreate = 10,
    /// <summary>
    ///支付宝支付请求下单
    /// </summary>
    [pbr::OriginalName("Mall_ReqAliPayCreate")] MallReqAliPayCreate = 11,
    [pbr::OriginalName("Mall_RespAliPayCreate")] MallRespAliPayCreate = 12,
    /// <summary>
    ///华为支付请求下单
    /// </summary>
    [pbr::OriginalName("Mall_ReqHuaweiPayCreate")] MallReqHuaweiPayCreate = 13,
    [pbr::OriginalName("Mall_RespHuaweiPayCreate")] MallRespHuaweiPayCreate = 14,
    /// <summary>
    ///Vivo支付请求下单
    /// </summary>
    [pbr::OriginalName("Mall_ReqVivoPayCreate")] MallReqVivoPayCreate = 15,
    [pbr::OriginalName("Mall_RespVivoPayCreate")] MallRespVivoPayCreate = 16,
    /// <summary>
    ///积分商品列表
    /// </summary>
    [pbr::OriginalName("Mall_ReqGiftList")] MallReqGiftList = 17,
    [pbr::OriginalName("Mall_RespGiftList")] MallRespGiftList = 18,
    /// <summary>
    ///获取收货地址
    /// </summary>
    [pbr::OriginalName("Mall_ReqUserAddrGet")] MallReqUserAddrGet = 19,
    [pbr::OriginalName("Mall_RespUserAddrGet")] MallRespUserAddrGet = 20,
    /// <summary>
    ///设置收货地址
    /// </summary>
    [pbr::OriginalName("Mall_ReqUserAddrSet")] MallReqUserAddrSet = 21,
    [pbr::OriginalName("Mall_RespUserAddrSet")] MallRespUserAddrSet = 22,
    /// <summary>
    ///积分兑换
    /// </summary>
    [pbr::OriginalName("Mall_ReqGiftExchange")] MallReqGiftExchange = 23,
    [pbr::OriginalName("Mall_RespGiftExchange")] MallRespGiftExchange = 24,
    /// <summary>
    ///积分兑换记录
    /// </summary>
    [pbr::OriginalName("Mall_ReqGiftExchangeList")] MallReqGiftExchangeList = 25,
    [pbr::OriginalName("Mall_RespGiftExchangeList")] MallRespGiftExchangeList = 26,
    /// <summary>
    ///Oppo支付请求下单
    /// </summary>
    [pbr::OriginalName("Mall_ReqOppoPayCreate")] MallReqOppoPayCreate = 27,
    [pbr::OriginalName("Mall_RespOppoPayCreate")] MallRespOppoPayCreate = 28,
    /// <summary>
    /// 获取练习币商城列表
    /// </summary>
    [pbr::OriginalName("Mall_ReqMallGetPracticeGoodsList")] MallReqMallGetPracticeGoodsList = 32,
    [pbr::OriginalName("Mall_RespMallGetPracticeGoodsList")] MallRespMallGetPracticeGoodsList = 33,
    /// <summary>
    /// 购买练习币道具
    /// </summary>
    [pbr::OriginalName("Mall_ReqMallBuyPracticeProp")] MallReqMallBuyPracticeProp = 34,
    [pbr::OriginalName("Mall_RespMallBuyPracticeProp")] MallRespMallBuyPracticeProp = 35,
  }

  public enum PBMainCmdTexasSubCmd {
    /// <summary>
    ///以下由客户端发给服务端
    /// </summary>
    [pbr::OriginalName("Texas_ReqJoinTable")] TexasReqJoinTable = 1,
    [pbr::OriginalName("Texas_ReqLeaveTable")] TexasReqLeaveTable = 2,
    [pbr::OriginalName("Texas_ReqSit")] TexasReqSit = 3,
    [pbr::OriginalName("Texas_ReqStand")] TexasReqStand = 4,
    [pbr::OriginalName("Texas_ReqChipin")] TexasReqChipin = 5,
    [pbr::OriginalName("Texas_ReqTabelInfo")] TexasReqTabelInfo = 6,
    [pbr::OriginalName("Texas_ReqShowCard")] TexasReqShowCard = 7,
    [pbr::OriginalName("Texas_ReqChat")] TexasReqChat = 8,
    [pbr::OriginalName("Texas_ReqBuyin")] TexasReqBuyin = 9,
    [pbr::OriginalName("Texas_ReqStartMatch")] TexasReqStartMatch = 10,
    [pbr::OriginalName("Texas_ReqBuyinHistory")] TexasReqBuyinHistory = 11,
    [pbr::OriginalName("Texas_ReqGameLog")] TexasReqGameLog = 12,
    [pbr::OriginalName("Texas_ReqRegisterAutoAction")] TexasReqRegisterAutoAction = 13,
    [pbr::OriginalName("Texas_ReqBuyInsurance")] TexasReqBuyInsurance = 14,
    [pbr::OriginalName("Texas_ReqCloseMatch")] TexasReqCloseMatch = 15,
    [pbr::OriginalName("Texas_ReqExtendThinkingTime")] TexasReqExtendThinkingTime = 16,
    [pbr::OriginalName("Texas_ReqChangeMuckOption")] TexasReqChangeMuckOption = 17,
    [pbr::OriginalName("Texas_ReqChangeInsuranceNotifyOption")] TexasReqChangeInsuranceNotifyOption = 18,
    [pbr::OriginalName("Texas_ReqLikeAMatch")] TexasReqLikeAmatch = 19,
    [pbr::OriginalName("Texas_ReqUnlikeAMatch")] TexasReqUnlikeAmatch = 20,
    [pbr::OriginalName("Texas_ReqKickUser")] TexasReqKickUser = 21,
    [pbr::OriginalName("Texas_ReqProcessBuyinRequest")] TexasReqProcessBuyinRequest = 22,
    [pbr::OriginalName("Texas_ReqSendInteractiveItem")] TexasReqSendInteractiveItem = 23,
    [pbr::OriginalName("Texas_ReqSNGConfig")] TexasReqSngconfig = 24,
    [pbr::OriginalName("Texas_ReqSNGChipRank")] TexasReqSngchipRank = 25,
    [pbr::OriginalName("Texas_ReqSNGMatchBoard")] TexasReqSngmatchBoard = 32,
    /// <summary>
    /// 增加保证金
    /// </summary>
    [pbr::OriginalName("Texas_ReqBuyDeposit")] TexasReqBuyDeposit = 33,
    /// <summary>
    /// 请求看公共牌 PBReqShowPublicCards
    /// </summary>
    [pbr::OriginalName("Texas_ReqShowPublicCards")] TexasReqShowPublicCards = 34,
    /// <summary>
    /// 请求看所有人手牌 PBReqShowAllHands
    /// </summary>
    [pbr::OriginalName("Texas_ReqShowAllHands")] TexasReqShowAllHands = 35,
    /// <summary>
    /// 请求记录费的具体数值 PBReqRecordNum
    /// </summary>
    [pbr::OriginalName("Texas_ReqRecordNum")] TexasReqRecordNum = 36,
    /// <summary>
    /// 准备增加保证金
    /// </summary>
    [pbr::OriginalName("Texas_ReqPrepareAddDeposit")] TexasReqPrepareAddDeposit = 37,
    /// <summary>
    /// 准备结算离桌
    /// </summary>
    [pbr::OriginalName("Texas_ReqPrepareCheckout")] TexasReqPrepareCheckout = 38,
    /// <summary>
    /// 结算离桌
    /// </summary>
    [pbr::OriginalName("Texas_ReqCheckout")] TexasReqCheckout = 39,
    /// <summary>
    /// 请求私人信息
    /// </summary>
    [pbr::OriginalName("Texas_ReqPrivateInfo")] TexasReqPrivateInfo = 40,
    /// <summary>
    ///以下是服务器发给客户端（含单播及广播）
    /// </summary>
    [pbr::OriginalName("Texas_NotifyJoinTable")] TexasNotifyJoinTable = 4097,
    [pbr::OriginalName("Texas_NotifyLeaveTable")] TexasNotifyLeaveTable = 4098,
    /// <summary>
    ///1.成功，2.座位有人，3.钱不够，4.系统其他错误，5.玩家已经有座位，6，找不到玩家，7.ip限制
    /// </summary>
    [pbr::OriginalName("Texas_NotifyUserSit")] TexasNotifyUserSit = 4099,
    [pbr::OriginalName("Texas_NotifyUserStand")] TexasNotifyUserStand = 4100,
    [pbr::OriginalName("Texas_NotifyStartChipin")] TexasNotifyStartChipin = 4101,
    [pbr::OriginalName("Texas_NotifyEndChipin")] TexasNotifyEndChipin = 4102,
    [pbr::OriginalName("Texas_NotifyTableInfo")] TexasNotifyTableInfo = 4103,
    [pbr::OriginalName("Texas_NotifyShowCard")] TexasNotifyShowCard = 4104,
    [pbr::OriginalName("Texas_NotifyChat")] TexasNotifyChat = 4105,
    /// <summary>
    ///广播开始一局游戏
    /// </summary>
    [pbr::OriginalName("Texas_NotifyGameStart")] TexasNotifyGameStart = 4112,
    [pbr::OriginalName("Texas_NotifyDealFlop")] TexasNotifyDealFlop = 4113,
    [pbr::OriginalName("Texas_NotifyDealTurn")] TexasNotifyDealTurn = 4114,
    [pbr::OriginalName("Texas_NotifyDealRiver")] TexasNotifyDealRiver = 4115,
    [pbr::OriginalName("Texas_NotifyStartDealCard")] TexasNotifyStartDealCard = 4116,
    [pbr::OriginalName("Texas_NotifyDealHoleCard")] TexasNotifyDealHoleCard = 4117,
    [pbr::OriginalName("Texas_NotifySyncSeatInfo")] TexasNotifySyncSeatInfo = 4118,
    [pbr::OriginalName("Texas_NotifyGameResult")] TexasNotifyGameResult = 4119,
    [pbr::OriginalName("Texas_NotifyUpdatePots")] TexasNotifyUpdatePots = 4120,
    [pbr::OriginalName("Texas_NotifyUserPutAnte")] TexasNotifyUserPutAnte = 4121,
    [pbr::OriginalName("Texas_NotifyUserInvalidAction")] TexasNotifyUserInvalidAction = 4128,
    [pbr::OriginalName("Texas_NotifySyncCardType")] TexasNotifySyncCardType = 4129,
    [pbr::OriginalName("Texas_NotifyUserBuyin")] TexasNotifyUserBuyin = 4130,
    /// <summary>
    ///广播房主开启了游戏
    /// </summary>
    [pbr::OriginalName("Texas_NotifyStartMatch")] TexasNotifyStartMatch = 4131,
    [pbr::OriginalName("Texas_NotifyMatchOver")] TexasNotifyMatchOver = 4132,
    [pbr::OriginalName("Texas_NotifyBuyinHistory")] TexasNotifyBuyinHistory = 4133,
    [pbr::OriginalName("Texas_NotifyGameLog")] TexasNotifyGameLog = 4134,
    [pbr::OriginalName("Texas_NotifyRegisterAutoAction")] TexasNotifyRegisterAutoAction = 4135,
    [pbr::OriginalName("Texas_NotifyEnterInsuranceMode")] TexasNotifyEnterInsuranceMode = 4136,
    /// <summary>
    ///收到此命令的购买
    /// </summary>
    [pbr::OriginalName("Texas_NotifyUserBuyInsurance")] TexasNotifyUserBuyInsurance = 4137,
    /// <summary>
    ///指定sid的玩家完成购买保险操作/超时
    /// </summary>
    [pbr::OriginalName("Texas_NotifyUserEndBuyInsurance")] TexasNotifyUserEndBuyInsurance = 4144,
    /// <summary>
    ///保险爆了会发出这条消息，直接赔钱
    /// </summary>
    [pbr::OriginalName("Texas_NotifyUserInsurancePayment")] TexasNotifyUserInsurancePayment = 4145,
    /// <summary>
    ///收到此命令代表Outs大于14张或0张，保险不激活
    /// </summary>
    [pbr::OriginalName("Texas_NotifyUserDisableInsurance")] TexasNotifyUserDisableInsurance = 4146,
    [pbr::OriginalName("Texas_NotifyAllSeatsInfo")] TexasNotifyAllSeatsInfo = 4147,
    [pbr::OriginalName("Texas_NotifyMatchWillClose")] TexasNotifyMatchWillClose = 4148,
    /// <summary>
    ///请求延时的用户会收到此命令
    /// </summary>
    [pbr::OriginalName("Texas_NotifyExtendThinkingTimeResult")] TexasNotifyExtendThinkingTimeResult = 4149,
    [pbr::OriginalName("Texas_NotifyUpdateThinkingTime")] TexasNotifyUpdateThinkingTime = 4150,
    [pbr::OriginalName("Texas_NotifyChangeMuckOption")] TexasNotifyChangeMuckOption = 4151,
    [pbr::OriginalName("Texas_NotifyShowCardResp")] TexasNotifyShowCardResp = 4152,
    [pbr::OriginalName("Texas_NotifyChangeInsuranceNotifyOption")] TexasNotifyChangeInsuranceNotifyOption = 4153,
    [pbr::OriginalName("Texas_NotifyLikeAMatchResp")] TexasNotifyLikeAmatchResp = 4160,
    [pbr::OriginalName("Texas_NotifyUnlikeAMatchResp")] TexasNotifyUnlikeAmatchResp = 4161,
    [pbr::OriginalName("Texas_NotifyRespKickUser")] TexasNotifyRespKickUser = 4162,
    [pbr::OriginalName("Texas_NotifyProcessBuyinRequest")] TexasNotifyProcessBuyinRequest = 4163,
    [pbr::OriginalName("Texas_NotifyUpdateMatchCloseTime")] TexasNotifyUpdateMatchCloseTime = 4164,
    [pbr::OriginalName("Texas_NotifySyncInteractiveItemConfig")] TexasNotifySyncInteractiveItemConfig = 4165,
    [pbr::OriginalName("Texas_NotifySendInteractiveItemResp")] TexasNotifySendInteractiveItemResp = 4166,
    [pbr::OriginalName("Texas_NotifyUserSendInteractiveItem")] TexasNotifyUserSendInteractiveItem = 4167,
    [pbr::OriginalName("Texas_NotifyUserUpdateMatchConfig")] TexasNotifyUserUpdateMatchConfig = 4168,
    [pbr::OriginalName("Texas_NotifyUserMatchCloseTimeRemind")] TexasNotifyUserMatchCloseTimeRemind = 4169,
    [pbr::OriginalName("Texas_NotifyRaiseBlind")] TexasNotifyRaiseBlind = 4176,
    [pbr::OriginalName("Texas_NotifyUserOut")] TexasNotifyUserOut = 4177,
    [pbr::OriginalName("Texas_NotifySNGConfig")] TexasNotifySngconfig = 4178,
    [pbr::OriginalName("Texas_NotifySNGChipRank")] TexasNotifySngchipRank = 4179,
    [pbr::OriginalName("Texas_NotifySNGMatchBoard")] TexasNotifySngmatchBoard = 4180,
    /// <summary>
    ///通知开启比赛结果
    /// </summary>
    [pbr::OriginalName("Texas_NotifyStartMatchResult")] TexasNotifyStartMatchResult = 4181,
    /// <summary>
    ///返回增加保证金结果
    /// </summary>
    [pbr::OriginalName("Texas_NotifyBuyDeposit")] TexasNotifyBuyDeposit = 4182,
    /// <summary>
    ///每次结算保证金的变化
    /// </summary>
    [pbr::OriginalName("Texas_NotifyDepositChange")] TexasNotifyDepositChange = 4183,
    /// <summary>
    ///比赛结束保证金的剩余情况
    /// </summary>
    [pbr::OriginalName("Texas_NotifyDepositOver")] TexasNotifyDepositOver = 4184,
    /// <summary>
    ///通知玩家可以执行看公共牌操作 PBNotifyShowPublicCards
    /// </summary>
    [pbr::OriginalName("Texas_NotifyShowPublicCards")] TexasNotifyShowPublicCards = 4185,
    /// <summary>
    ///回复看公共牌 PBRespShowPublicCards
    /// </summary>
    [pbr::OriginalName("Texas_RespShowPublicCards")] TexasRespShowPublicCards = 4192,
    /// <summary>
    ///广播房间所有人，谁看了公共牌 PBNotifyWhoShowPublicCards
    /// </summary>
    [pbr::OriginalName("Texas_NotifyWhoShowPublicCards")] TexasNotifyWhoShowPublicCards = 4193,
    /// <summary>
    ///通知玩家可以执行看所有人手牌操作 PBNotifyShowAllHands
    /// </summary>
    [pbr::OriginalName("Texas_NotifyShowAllHands")] TexasNotifyShowAllHands = 4194,
    /// <summary>
    ///回复看所有人手牌 PBResphowAllHands
    /// </summary>
    [pbr::OriginalName("Texas_RespShowAllHands")] TexasRespShowAllHands = 4195,
    /// <summary>
    ///回复记录费的具体数值 PBRespRecordNum
    /// </summary>
    [pbr::OriginalName("Texas_RespRecordNum")] TexasRespRecordNum = 4196,
    /// <summary>
    /// 准备增加保证金
    /// </summary>
    [pbr::OriginalName("Texas_RespPrepareAddDeposit")] TexasRespPrepareAddDeposit = 4197,
    /// <summary>
    /// 准备结算离桌
    /// </summary>
    [pbr::OriginalName("Texas_RespPrepareCheckout")] TexasRespPrepareCheckout = 4198,
    /// <summary>
    /// 结算离桌
    /// </summary>
    [pbr::OriginalName("Texas_RespCheckout")] TexasRespCheckout = 4199,
    /// <summary>
    /// 请求私人信息
    /// </summary>
    [pbr::OriginalName("Texas_RespPrivateInfo")] TexasRespPrivateInfo = 4200,
    /// <summary>
    /// 通知玩家退出游戏到登录界面
    /// </summary>
    [pbr::OriginalName("Texas_NotifyLogout")] TexasNotifyLogout = 4201,
    /// <summary>
    ///异常逻辑回包
    /// </summary>
    [pbr::OriginalName("Texas_NotifyUesrNotJoinTable")] TexasNotifyUesrNotJoinTable = 8193,
  }

  /// <summary>
  /// 短牌服新加 added by ty
  /// </summary>
  public enum PBMainCmdShortSubCmd {
    /// <summary>
    ///以下由客户端发给服务端
    /// </summary>
    [pbr::OriginalName("Short_ReqJoinTable")] ShortReqJoinTable = 1,
    [pbr::OriginalName("Short_ReqLeaveTable")] ShortReqLeaveTable = 2,
    [pbr::OriginalName("Short_ReqSit")] ShortReqSit = 3,
    [pbr::OriginalName("Short_ReqStand")] ShortReqStand = 4,
    [pbr::OriginalName("Short_ReqChipin")] ShortReqChipin = 5,
    [pbr::OriginalName("Short_ReqTabelInfo")] ShortReqTabelInfo = 6,
    [pbr::OriginalName("Short_ReqShowCard")] ShortReqShowCard = 7,
    [pbr::OriginalName("Short_ReqChat")] ShortReqChat = 8,
    [pbr::OriginalName("Short_ReqBuyin")] ShortReqBuyin = 9,
    [pbr::OriginalName("Short_ReqStartMatch")] ShortReqStartMatch = 10,
    [pbr::OriginalName("Short_ReqBuyinHistory")] ShortReqBuyinHistory = 11,
    [pbr::OriginalName("Short_ReqGameLog")] ShortReqGameLog = 12,
    [pbr::OriginalName("Short_ReqRegisterAutoAction")] ShortReqRegisterAutoAction = 13,
    [pbr::OriginalName("Short_ReqBuyInsurance")] ShortReqBuyInsurance = 14,
    [pbr::OriginalName("Short_ReqCloseMatch")] ShortReqCloseMatch = 15,
    [pbr::OriginalName("Short_ReqExtendThinkingTime")] ShortReqExtendThinkingTime = 16,
    [pbr::OriginalName("Short_ReqChangeMuckOption")] ShortReqChangeMuckOption = 17,
    [pbr::OriginalName("Short_ReqChangeInsuranceNotifyOption")] ShortReqChangeInsuranceNotifyOption = 18,
    [pbr::OriginalName("Short_ReqLikeAMatch")] ShortReqLikeAmatch = 19,
    [pbr::OriginalName("Short_ReqUnlikeAMatch")] ShortReqUnlikeAmatch = 20,
    [pbr::OriginalName("Short_ReqKickUser")] ShortReqKickUser = 21,
    [pbr::OriginalName("Short_ReqProcessBuyinRequest")] ShortReqProcessBuyinRequest = 22,
    [pbr::OriginalName("Short_ReqSendInteractiveItem")] ShortReqSendInteractiveItem = 23,
    [pbr::OriginalName("Short_ReqSNGConfig")] ShortReqSngconfig = 24,
    [pbr::OriginalName("Short_ReqSNGChipRank")] ShortReqSngchipRank = 25,
    [pbr::OriginalName("Short_ReqSNGMatchBoard")] ShortReqSngmatchBoard = 32,
    /// <summary>
    /// 增加保证金
    /// </summary>
    [pbr::OriginalName("Short_ReqBuyDeposit")] ShortReqBuyDeposit = 33,
    /// <summary>
    /// 请求看公共牌 PBReqShowPublicCards
    /// </summary>
    [pbr::OriginalName("Short_ReqShowPublicCards")] ShortReqShowPublicCards = 34,
    /// <summary>
    /// 请求看所有人手牌 PBReqShowAllHands
    /// </summary>
    [pbr::OriginalName("Short_ReqShowAllHands")] ShortReqShowAllHands = 35,
    /// <summary>
    /// 请求记录费的具体数值 PBReqRecordNum
    /// </summary>
    [pbr::OriginalName("Short_ReqRecordNum")] ShortReqRecordNum = 36,
    /// <summary>
    /// 准备增加保证金
    /// </summary>
    [pbr::OriginalName("Short_ReqPrepareAddDeposit")] ShortReqPrepareAddDeposit = 37,
    /// <summary>
    /// 准备结算离桌
    /// </summary>
    [pbr::OriginalName("Short_ReqPrepareCheckout")] ShortReqPrepareCheckout = 38,
    /// <summary>
    /// 结算离桌
    /// </summary>
    [pbr::OriginalName("Short_ReqCheckout")] ShortReqCheckout = 39,
    /// <summary>
    /// 请求私人信息
    /// </summary>
    [pbr::OriginalName("Short_ReqPrivateInfo")] ShortReqPrivateInfo = 40,
    /// <summary>
    ///以下是服务器发给客户端（含单播及广播）
    /// </summary>
    [pbr::OriginalName("Short_NotifyJoinTable")] ShortNotifyJoinTable = 4097,
    [pbr::OriginalName("Short_NotifyLeaveTable")] ShortNotifyLeaveTable = 4098,
    /// <summary>
    ///1.成功，2.座位有人，3.钱不够，4.系统其他错误，5.玩家已经有座位，6，找不到玩家，7.ip限制
    /// </summary>
    [pbr::OriginalName("Short_NotifyUserSit")] ShortNotifyUserSit = 4099,
    [pbr::OriginalName("Short_NotifyUserStand")] ShortNotifyUserStand = 4100,
    [pbr::OriginalName("Short_NotifyStartChipin")] ShortNotifyStartChipin = 4101,
    [pbr::OriginalName("Short_NotifyEndChipin")] ShortNotifyEndChipin = 4102,
    [pbr::OriginalName("Short_NotifyTableInfo")] ShortNotifyTableInfo = 4103,
    [pbr::OriginalName("Short_NotifyShowCard")] ShortNotifyShowCard = 4104,
    [pbr::OriginalName("Short_NotifyChat")] ShortNotifyChat = 4105,
    /// <summary>
    ///广播开始一局游戏
    /// </summary>
    [pbr::OriginalName("Short_NotifyGameStart")] ShortNotifyGameStart = 4112,
    [pbr::OriginalName("Short_NotifyDealFlop")] ShortNotifyDealFlop = 4113,
    [pbr::OriginalName("Short_NotifyDealTurn")] ShortNotifyDealTurn = 4114,
    [pbr::OriginalName("Short_NotifyDealRiver")] ShortNotifyDealRiver = 4115,
    [pbr::OriginalName("Short_NotifyStartDealCard")] ShortNotifyStartDealCard = 4116,
    [pbr::OriginalName("Short_NotifyDealHoleCard")] ShortNotifyDealHoleCard = 4117,
    [pbr::OriginalName("Short_NotifySyncSeatInfo")] ShortNotifySyncSeatInfo = 4118,
    [pbr::OriginalName("Short_NotifyGameResult")] ShortNotifyGameResult = 4119,
    [pbr::OriginalName("Short_NotifyUpdatePots")] ShortNotifyUpdatePots = 4120,
    [pbr::OriginalName("Short_NotifyUserPutAnte")] ShortNotifyUserPutAnte = 4121,
    [pbr::OriginalName("Short_NotifyUserInvalidAction")] ShortNotifyUserInvalidAction = 4128,
    [pbr::OriginalName("Short_NotifySyncCardType")] ShortNotifySyncCardType = 4129,
    [pbr::OriginalName("Short_NotifyUserBuyin")] ShortNotifyUserBuyin = 4130,
    /// <summary>
    ///广播房主开启了游戏
    /// </summary>
    [pbr::OriginalName("Short_NotifyStartMatch")] ShortNotifyStartMatch = 4131,
    [pbr::OriginalName("Short_NotifyMatchOver")] ShortNotifyMatchOver = 4132,
    [pbr::OriginalName("Short_NotifyBuyinHistory")] ShortNotifyBuyinHistory = 4133,
    [pbr::OriginalName("Short_NotifyGameLog")] ShortNotifyGameLog = 4134,
    [pbr::OriginalName("Short_NotifyRegisterAutoAction")] ShortNotifyRegisterAutoAction = 4135,
    [pbr::OriginalName("Short_NotifyEnterInsuranceMode")] ShortNotifyEnterInsuranceMode = 4136,
    /// <summary>
    ///收到此命令的购买
    /// </summary>
    [pbr::OriginalName("Short_NotifyUserBuyInsurance")] ShortNotifyUserBuyInsurance = 4137,
    /// <summary>
    ///指定sid的玩家完成购买保险操作/超时
    /// </summary>
    [pbr::OriginalName("Short_NotifyUserEndBuyInsurance")] ShortNotifyUserEndBuyInsurance = 4144,
    /// <summary>
    ///保险爆了会发出这条消息，直接赔钱
    /// </summary>
    [pbr::OriginalName("Short_NotifyUserInsurancePayment")] ShortNotifyUserInsurancePayment = 4145,
    /// <summary>
    ///收到此命令代表Outs大于14张或0张，保险不激活
    /// </summary>
    [pbr::OriginalName("Short_NotifyUserDisableInsurance")] ShortNotifyUserDisableInsurance = 4146,
    [pbr::OriginalName("Short_NotifyAllSeatsInfo")] ShortNotifyAllSeatsInfo = 4147,
    [pbr::OriginalName("Short_NotifyMatchWillClose")] ShortNotifyMatchWillClose = 4148,
    /// <summary>
    ///请求延时的用户会收到此命令
    /// </summary>
    [pbr::OriginalName("Short_NotifyExtendThinkingTimeResult")] ShortNotifyExtendThinkingTimeResult = 4149,
    [pbr::OriginalName("Short_NotifyUpdateThinkingTime")] ShortNotifyUpdateThinkingTime = 4150,
    [pbr::OriginalName("Short_NotifyChangeMuckOption")] ShortNotifyChangeMuckOption = 4151,
    [pbr::OriginalName("Short_NotifyShowCardResp")] ShortNotifyShowCardResp = 4152,
    [pbr::OriginalName("Short_NotifyChangeInsuranceNotifyOption")] ShortNotifyChangeInsuranceNotifyOption = 4153,
    [pbr::OriginalName("Short_NotifyLikeAMatchResp")] ShortNotifyLikeAmatchResp = 4160,
    [pbr::OriginalName("Short_NotifyUnlikeAMatchResp")] ShortNotifyUnlikeAmatchResp = 4161,
    [pbr::OriginalName("Short_NotifyRespKickUser")] ShortNotifyRespKickUser = 4162,
    [pbr::OriginalName("Short_NotifyProcessBuyinRequest")] ShortNotifyProcessBuyinRequest = 4163,
    [pbr::OriginalName("Short_NotifyUpdateMatchCloseTime")] ShortNotifyUpdateMatchCloseTime = 4164,
    [pbr::OriginalName("Short_NotifySyncInteractiveItemConfig")] ShortNotifySyncInteractiveItemConfig = 4165,
    [pbr::OriginalName("Short_NotifySendInteractiveItemResp")] ShortNotifySendInteractiveItemResp = 4166,
    [pbr::OriginalName("Short_NotifyUserSendInteractiveItem")] ShortNotifyUserSendInteractiveItem = 4167,
    [pbr::OriginalName("Short_NotifyUserUpdateMatchConfig")] ShortNotifyUserUpdateMatchConfig = 4168,
    [pbr::OriginalName("Short_NotifyUserMatchCloseTimeRemind")] ShortNotifyUserMatchCloseTimeRemind = 4169,
    [pbr::OriginalName("Short_NotifyRaiseBlind")] ShortNotifyRaiseBlind = 4176,
    [pbr::OriginalName("Short_NotifyUserOut")] ShortNotifyUserOut = 4177,
    [pbr::OriginalName("Short_NotifySNGConfig")] ShortNotifySngconfig = 4178,
    [pbr::OriginalName("Short_NotifySNGChipRank")] ShortNotifySngchipRank = 4179,
    [pbr::OriginalName("Short_NotifySNGMatchBoard")] ShortNotifySngmatchBoard = 4180,
    /// <summary>
    ///通知开启比赛结果
    /// </summary>
    [pbr::OriginalName("Short_NotifyStartMatchResult")] ShortNotifyStartMatchResult = 4181,
    /// <summary>
    ///返回增加保证金结果
    /// </summary>
    [pbr::OriginalName("Short_NotifyBuyDeposit")] ShortNotifyBuyDeposit = 4182,
    /// <summary>
    ///每次结算保证金的变化
    /// </summary>
    [pbr::OriginalName("Short_NotifyDepositChange")] ShortNotifyDepositChange = 4183,
    /// <summary>
    ///比赛结束保证金的剩余情况
    /// </summary>
    [pbr::OriginalName("Short_NotifyDepositOver")] ShortNotifyDepositOver = 4184,
    /// <summary>
    ///通知玩家可以执行看公共牌操作 PBNotifyShowPublicCards
    /// </summary>
    [pbr::OriginalName("Short_NotifyShowPublicCards")] ShortNotifyShowPublicCards = 4185,
    /// <summary>
    ///回复看公共牌 PBRespShowPublicCards
    /// </summary>
    [pbr::OriginalName("Short_RespShowPublicCards")] ShortRespShowPublicCards = 4192,
    /// <summary>
    ///广播房间所有人，谁看了公共牌 PBNotifyWhoShowPublicCards
    /// </summary>
    [pbr::OriginalName("Short_NotifyWhoShowPublicCards")] ShortNotifyWhoShowPublicCards = 4193,
    /// <summary>
    ///通知玩家可以执行看所有人手牌操作 PBNotifyShowAllHands
    /// </summary>
    [pbr::OriginalName("Short_NotifyShowAllHands")] ShortNotifyShowAllHands = 4194,
    /// <summary>
    ///回复看所有人手牌 PBResphowAllHands
    /// </summary>
    [pbr::OriginalName("Short_RespShowAllHands")] ShortRespShowAllHands = 4195,
    /// <summary>
    ///回复记录费的具体数值 PBRespRecordNum
    /// </summary>
    [pbr::OriginalName("Short_RespRecordNum")] ShortRespRecordNum = 4196,
    /// <summary>
    /// 准备增加保证金
    /// </summary>
    [pbr::OriginalName("Short_RespPrepareAddDeposit")] ShortRespPrepareAddDeposit = 4197,
    /// <summary>
    /// 准备结算离桌
    /// </summary>
    [pbr::OriginalName("Short_RespPrepareCheckout")] ShortRespPrepareCheckout = 4198,
    /// <summary>
    /// 结算离桌
    /// </summary>
    [pbr::OriginalName("Short_RespCheckout")] ShortRespCheckout = 4199,
    /// <summary>
    /// 请求私人信息
    /// </summary>
    [pbr::OriginalName("Short_RespPrivateInfo")] ShortRespPrivateInfo = 4200,
    /// <summary>
    /// 通知玩家退出游戏到登录界面
    /// </summary>
    [pbr::OriginalName("Short_NotifyLogout")] ShortNotifyLogout = 4201,
    /// <summary>
    ///异常逻辑回包
    /// </summary>
    [pbr::OriginalName("Short_NotifyUesrNotJoinTable")] ShortNotifyUesrNotJoinTable = 8193,
  }

  public enum PBMainCmdMatchListSubCmd {
    [pbr::OriginalName("ML_ReqMatchList")] MlReqMatchList = 1,
    [pbr::OriginalName("ML_RespMatchList")] MlRespMatchList = 2,
    [pbr::OriginalName("ML_ReqCreateMatch")] MlReqCreateMatch = 3,
    [pbr::OriginalName("ML_RespCreateMatch")] MlRespCreateMatch = 4,
    /// <summary>
    ///请求比赛 idx
    /// </summary>
    [pbr::OriginalName("ML_ReqMatchIndex")] MlReqMatchIndex = 5,
    [pbr::OriginalName("ML_RespMatchIndex")] MlRespMatchIndex = 6,
    [pbr::OriginalName("ML_ReqClubMatchList")] MlReqClubMatchList = 7,
    [pbr::OriginalName("ML_RespClubMatchList")] MlRespClubMatchList = 8,
    [pbr::OriginalName("ML_ReqQuickJoinMatch")] MlReqQuickJoinMatch = 9,
    [pbr::OriginalName("ML_RespQuickJoinMatch")] MlRespQuickJoinMatch = 10,
    [pbr::OriginalName("ML_ReqMatchListByGroup")] MlReqMatchListByGroup = 11,
    [pbr::OriginalName("ML_RespMatchListByGroup")] MlRespMatchListByGroup = 12,
    [pbr::OriginalName("ML_ReqJoinGroupMatch")] MlReqJoinGroupMatch = 13,
    [pbr::OriginalName("ML_RespJoinGroupMatch")] MlRespJoinGroupMatch = 14,
    [pbr::OriginalName("ML_ReqGetCreateMatchConfig")] MlReqGetCreateMatchConfig = 15,
    [pbr::OriginalName("ML_RespGetCreateMatchConfig")] MlRespGetCreateMatchConfig = 16,
    [pbr::OriginalName("ML_ReqCreateSNG")] MlReqCreateSng = 17,
    [pbr::OriginalName("ML_RespCreateSNG")] MlRespCreateSng = 18,
    /// <summary>
    /// 创建短牌
    /// </summary>
    [pbr::OriginalName("ML_ReqCreateShort")] MlReqCreateShort = 19,
    [pbr::OriginalName("ML_RespCreateShort")] MlRespCreateShort = 20,
    /// <summary>
    /// 查询房间内是否有需要玩家处理的消息
    /// </summary>
    [pbr::OriginalName("ML_ReqFetchMsg")] MlReqFetchMsg = 4097,
    /// <summary>
    ///返回需要用户处理的消息
    /// </summary>
    [pbr::OriginalName("ML_RespFetchMsg")] MlRespFetchMsg = 4098,
  }

  public enum PBMainCmdGLogSubCmd {
    [pbr::OriginalName("GLog_ReqUserMatchRecord")] GlogReqUserMatchRecord = 1,
    [pbr::OriginalName("GLog_RespUserMatchRecord")] GlogRespUserMatchRecord = 2,
    [pbr::OriginalName("GLog_ReqMatchDetail")] GlogReqMatchDetail = 3,
    [pbr::OriginalName("GLog_RespMatchDetail")] GlogRespMatchDetail = 4,
    [pbr::OriginalName("GLog_ReqMatchLog")] GlogReqMatchLog = 5,
    [pbr::OriginalName("GLog_RespMatchLog")] GlogRespMatchLog = 6,
    [pbr::OriginalName("GLog_ReqFetchFavMatchLogs")] GlogReqFetchFavMatchLogs = 7,
    [pbr::OriginalName("GLog_RespFetchFavMatchLogs")] GlogRespFetchFavMatchLogs = 8,
    [pbr::OriginalName("GLog_ReqFavMatchLogDetail")] GlogReqFavMatchLogDetail = 9,
    [pbr::OriginalName("GLog_RespFavMatchLogDetail")] GlogRespFavMatchLogDetail = 10,
    [pbr::OriginalName("GLog_ReqDeleteFavMatchLog")] GlogReqDeleteFavMatchLog = 11,
    [pbr::OriginalName("GLog_RespDeleteFavMatchLog")] GlogRespDeleteFavMatchLog = 12,
    /// <summary>
    /// 在战绩中进行收藏
    /// </summary>
    [pbr::OriginalName("GLog_ReqFavMatchLog")] GlogReqFavMatchLog = 13,
    /// <summary>
    /// 返回战绩中收藏结果
    /// </summary>
    [pbr::OriginalName("GLog_RespFavMatchLog")] GlogRespFavMatchLog = 14,
    [pbr::OriginalName("GLog_ReqQueryFavMatchCount")] GlogReqQueryFavMatchCount = 15,
    [pbr::OriginalName("GLog_RespQueryFavMatchCount")] GlogRespQueryFavMatchCount = 16,
    [pbr::OriginalName("GLog_ReqQueryUserGameData")] GlogReqQueryUserGameData = 17,
    [pbr::OriginalName("GLog_RespQueryUserGameData")] GlogRespQueryUserGameData = 18,
    /// <summary>
    /// 请求俱乐部牌局列表
    /// </summary>
    [pbr::OriginalName("GLog_ReqClubMatchRecord")] GlogReqClubMatchRecord = 19,
    /// <summary>
    /// 请求俱乐部牌局超级统计
    /// </summary>
    [pbr::OriginalName("GLog_ReqClubMatchSuperStat")] GlogReqClubMatchSuperStat = 20,
    [pbr::OriginalName("GLog_RespClubMatchSuperStat")] GlogRespClubMatchSuperStat = 21,
    [pbr::OriginalName("GLog_RespClubMatchRecord")] GlogRespClubMatchRecord = 22,
    /// <summary>
    /// 俱乐部查看联盟牌局记录 PBGLogReqClubMatchRecord
    /// </summary>
    [pbr::OriginalName("GLog_ReqUnionMatchRecord")] GlogReqUnionMatchRecord = 23,
    /// <summary>
    /// PBGLogRespUserMatchRecord
    /// </summary>
    [pbr::OriginalName("GLog_RespUnionMatchRecord")] GlogRespUnionMatchRecord = 24,
    /// <summary>
    /// 俱乐部查看联盟牌局记录详情 PBGLogReqMatchDetail
    /// </summary>
    [pbr::OriginalName("GLog_ReqUnionMatchDetail")] GlogReqUnionMatchDetail = 25,
    /// <summary>
    /// PBGLogRespMatchDetail
    /// </summary>
    [pbr::OriginalName("GLog_RespUnionMatchDetail")] GlogRespUnionMatchDetail = 32,
    /// <summary>
    /// 请求联盟牌局超级统计 PBGLogReqUnionMatchSuperStat
    /// </summary>
    [pbr::OriginalName("GLog_ReqUnionMatchSuperStat")] GlogReqUnionMatchSuperStat = 33,
    /// <summary>
    /// PBGLogRespMatchDetail
    /// </summary>
    [pbr::OriginalName("GLog_RespUnionMatchSuperStat")] GlogRespUnionMatchSuperStat = 34,
    /// <summary>
    /// 请求联盟牌局概况 PBGLogReqUnionMatchSummary
    /// </summary>
    [pbr::OriginalName("GLog_ReqUnionMatchSummary")] GlogReqUnionMatchSummary = 35,
    /// <summary>
    /// PBGLogRespUnionMatchSummary
    /// </summary>
    [pbr::OriginalName("GLog_RespUnionMatchSummary")] GlogRespUnionMatchSummary = 36,
    /// <summary>
    /// 请求俱乐部牌局概况 PBGLogReqClubMatchSummary
    /// </summary>
    [pbr::OriginalName("GLog_ReqClubMatchSummary")] GlogReqClubMatchSummary = 37,
    /// <summary>
    /// PBGLogRespClubMatchSummary
    /// </summary>
    [pbr::OriginalName("GLog_RespClubMatchSummary")] GlogRespClubMatchSummary = 38,
    /// <summary>
    /// 请求用户德州数据: 总手数、vpip(入池率)、pfr(翻牌前加注率)
    /// </summary>
    [pbr::OriginalName("GLog_UserPokerDataReq")] GlogUserPokerDataReq = 39,
    [pbr::OriginalName("GLog_UserPokerDataResp")] GlogUserPokerDataResp = 40,
    /// <summary>
    /// [收藏/取消]收藏一手牌局
    /// </summary>
    [pbr::OriginalName("GLog_KeepHandReq")] GlogKeepHandReq = 41,
    [pbr::OriginalName("GLog_KeepHandResp")] GlogKeepHandResp = 48,
    /// <summary>
    /// 获取收藏的牌局
    /// </summary>
    [pbr::OriginalName("GLog_FavoriteHandsReq")] GlogFavoriteHandsReq = 49,
    [pbr::OriginalName("GLog_FavoriteHandsResp")] GlogFavoriteHandsResp = 50,
    /// <summary>
    /// 查看已收藏的牌局
    /// </summary>
    [pbr::OriginalName("GLog_ViewFavoriteHandReq")] GlogViewFavoriteHandReq = 51,
    [pbr::OriginalName("GLog_ViewFavoriteHandResp")] GlogViewFavoriteHandResp = 52,
    /// <summary>
    /// 强制亮牌
    /// </summary>
    [pbr::OriginalName("GLog_ShowFavoriteHandsReq")] GlogShowFavoriteHandsReq = 53,
    [pbr::OriginalName("GLog_ShowFavoriteHandsResp")] GlogShowFavoriteHandsResp = 54,
    /// <summary>
    /// 发发看
    /// </summary>
    [pbr::OriginalName("GLog_ShowFavPublicCardsReq")] GlogShowFavPublicCardsReq = 55,
    [pbr::OriginalName("GLog_ShowFavPublicCardsResp")] GlogShowFavPublicCardsResp = 56,
  }

  public enum PBMainCmdNotifySubCmd {
    [pbr::OriginalName("Notify_SyncNotification")] NotifySyncNotification = 1,
    [pbr::OriginalName("Notify_SyncNotificationOnLogin")] NotifySyncNotificationOnLogin = 2,
    [pbr::OriginalName("Notify_ReqFetchNotifys")] NotifyReqFetchNotifys = 3,
    [pbr::OriginalName("Notify_RespFetchNotifys")] NotifyRespFetchNotifys = 4,
    /// <summary>
    /// 请求公告
    /// </summary>
    [pbr::OriginalName("Notify_ReqBulletin")] NotifyReqBulletin = 5,
    [pbr::OriginalName("Notify_RespBulletin")] NotifyRespBulletin = 6,
  }

  public enum PBMainCmdHunTexasSubCmd {
    /// <summary>
    ///以下由客户端发给服务端
    /// </summary>
    [pbr::OriginalName("HunTexas_ReqJoinTable")] HunTexasReqJoinTable = 1,
    [pbr::OriginalName("HunTexas_ReqLeaveTable")] HunTexasReqLeaveTable = 2,
    [pbr::OriginalName("HunTexas_ReqSit")] HunTexasReqSit = 3,
    [pbr::OriginalName("HunTexas_ReqStand")] HunTexasReqStand = 4,
    [pbr::OriginalName("HunTexas_ReqTabelInfo")] HunTexasReqTabelInfo = 5,
    [pbr::OriginalName("HunTexas_ReqChipin")] HunTexasReqChipin = 6,
    [pbr::OriginalName("HunTexas_ReqChat")] HunTexasReqChat = 7,
    [pbr::OriginalName("HunTexas_ReqHistory")] HunTexasReqHistory = 8,
    [pbr::OriginalName("HunTexas_ReqOnlooker")] HunTexasReqOnlooker = 9,
    /// <summary>
    ///以下是服务器发给客户端（含单播及广播）
    /// </summary>
    [pbr::OriginalName("HunTexas_NotifyJoinTable")] HunTexasNotifyJoinTable = 4097,
    [pbr::OriginalName("HunTexas_NotifyLeaveTable")] HunTexasNotifyLeaveTable = 4098,
    /// <summary>
    ///1.成功，2.座位有人，3.钱不够，4.系统其他错误，5.玩家已经有座位，6，找不到玩家，7.ip限制
    /// </summary>
    [pbr::OriginalName("HunTexas_NotifyUserSit")] HunTexasNotifyUserSit = 4099,
    [pbr::OriginalName("HunTexas_NotifyUserStand")] HunTexasNotifyUserStand = 4100,
    [pbr::OriginalName("HunTexas_NotifyTableInfo")] HunTexasNotifyTableInfo = 4101,
    /// <summary>
    ///反馈用户下注结果
    /// </summary>
    [pbr::OriginalName("HunTexas_NotifyUserChipin")] HunTexasNotifyUserChipin = 4102,
    /// <summary>
    ///同步其他玩家下注
    /// </summary>
    [pbr::OriginalName("HunTexas_SyncOtherChipin")] HunTexasSyncOtherChipin = 4103,
    /// <summary>
    ///通知玩家准备
    /// </summary>
    [pbr::OriginalName("HunTexas_NotifyPrepare")] HunTexasNotifyPrepare = 4104,
    /// <summary>
    ///通知开始发牌
    /// </summary>
    [pbr::OriginalName("HunTexas_NotifyDealCard")] HunTexasNotifyDealCard = 4105,
    /// <summary>
    ///通知开始下注
    /// </summary>
    [pbr::OriginalName("HunTexas_NotifyStartBetting")] HunTexasNotifyStartBetting = 4112,
    /// <summary>
    ///通知开牌
    /// </summary>
    [pbr::OriginalName("HunTexas_NotifyOpenCard")] HunTexasNotifyOpenCard = 4113,
    /// <summary>
    ///通知结算
    /// </summary>
    [pbr::OriginalName("HunTexas_NotifyPayBet")] HunTexasNotifyPayBet = 4114,
    /// <summary>
    ///通知聊天
    /// </summary>
    [pbr::OriginalName("HunTexas_NotifyUserChat")] HunTexasNotifyUserChat = 4115,
    /// <summary>
    ///同步座位上的玩家下注
    /// </summary>
    [pbr::OriginalName("HunTexas_SyncSeatUserChipin")] HunTexasSyncSeatUserChipin = 4116,
    /// <summary>
    ///同步彩池信息
    /// </summary>
    [pbr::OriginalName("HunTexas_SyncBonusPot")] HunTexasSyncBonusPot = 4117,
    /// <summary>
    ///更新玩家座位信息
    /// </summary>
    [pbr::OriginalName("HunTexas_SyncSeatInfo")] HunTexasSyncSeatInfo = 4118,
    /// <summary>
    ///更新无座玩家数字
    /// </summary>
    [pbr::OriginalName("HunTexas_SyncPlayerNum")] HunTexasSyncPlayerNum = 4119,
    /// <summary>
    ///返回历史胜负
    /// </summary>
    [pbr::OriginalName("HunTexas_RespHistory")] HunTexasRespHistory = 4120,
    /// <summary>
    ///返回旁观用户信息
    /// </summary>
    [pbr::OriginalName("HunTexas_RespOnlooker")] HunTexasRespOnlooker = 4121,
    /// <summary>
    ///列表功能
    /// </summary>
    [pbr::OriginalName("HunTexas_ReqQuickJoin")] HunTexasReqQuickJoin = 8193,
    [pbr::OriginalName("HunTexas_RespQuickJoin")] HunTexasRespQuickJoin = 8194,
  }

  /// <summary>
  /// 聊天服字命令字
  /// </summary>
  public enum PBMainCmdChatSubCmd {
    /// <summary>
    ///注册频道请求
    /// </summary>
    [pbr::OriginalName("Chat_RegisterChannelReq")] ChatRegisterChannelReq = 1,
    /// <summary>
    ///注册频道回复
    /// </summary>
    [pbr::OriginalName("Chat_RegisterChannelResp")] ChatRegisterChannelResp = 2,
    /// <summary>
    ///退出频道请求
    /// </summary>
    [pbr::OriginalName("Chat_UnRegisterChannelReq")] ChatUnRegisterChannelReq = 3,
    /// <summary>
    ///退出频道回复
    /// </summary>
    [pbr::OriginalName("Chat_UnRegisterChannelResp")] ChatUnRegisterChannelResp = 4,
    /// <summary>
    ///发送文字或语音聊天请求
    /// </summary>
    [pbr::OriginalName("Chat_SendChatReq")] ChatSendChatReq = 5,
    /// <summary>
    ///发送文字或语音聊天回复
    /// </summary>
    [pbr::OriginalName("Chat_SendChatResp")] ChatSendChatResp = 6,
    /// <summary>
    ///发送文字或语音聊天通知
    /// </summary>
    [pbr::OriginalName("Chat_SendChatPush")] ChatSendChatPush = 7,
    /// <summary>
    ///发送互动表情请求
    /// </summary>
    [pbr::OriginalName("Chat_SendInteractivePropReq")] ChatSendInteractivePropReq = 8,
    /// <summary>
    ///发送互动表情回复
    /// </summary>
    [pbr::OriginalName("Chat_SendInteractivePropResp")] ChatSendInteractivePropResp = 9,
    /// <summary>
    ///发送互动表情通知
    /// </summary>
    [pbr::OriginalName("Chat_SendInteractivePropPush")] ChatSendInteractivePropPush = 10,
  }

  /// <summary>
  ///对应Poker 客户端与服务器的交互
  /// xxReq: 客户端请求
  /// xxResp: 服务器回复客户端请求 
  /// xxPush: 服务器通知客户端
  /// </summary>
  public enum Poker {
    /// <summary>
    ///玩家登陆桌子请求
    /// </summary>
    [pbr::OriginalName("CmdLoginReq")] CmdLoginReq = 1,
    /// <summary>
    ///玩家登陆桌子回复
    /// </summary>
    [pbr::OriginalName("CmdLoginResp")] CmdLoginResp = 2,
    /// <summary>
    ///离开房间
    /// </summary>
    [pbr::OriginalName("CmdLogoutReq")] CmdLogoutReq = 3,
    [pbr::OriginalName("CmdLogoutResp")] CmdLogoutResp = 4,
    /// <summary>
    ///获取正在玩牌的信息(登陆后处于玩牌状态需要)
    /// </summary>
    [pbr::OriginalName("CmdPlayInfoReq")] CmdPlayInfoReq = 5,
    [pbr::OriginalName("CmdPlayInfoResp")] CmdPlayInfoResp = 6,
    /// <summary>
    ///玩家坐下请求
    /// </summary>
    [pbr::OriginalName("CmdSitdownReq")] CmdSitdownReq = 7,
    [pbr::OriginalName("CmdSitdownResp")] CmdSitdownResp = 8,
    /// <summary>
    ///玩家站起请求
    /// </summary>
    [pbr::OriginalName("CmdStandupReq")] CmdStandupReq = 9,
    [pbr::OriginalName("CmdStandupResp")] CmdStandupResp = 10,
    /// <summary>
    ///玩家请求下注
    /// </summary>
    [pbr::OriginalName("CmdActionReq")] CmdActionReq = 11,
    [pbr::OriginalName("CmdActionResp")] CmdActionResp = 12,
    /// <summary>
    ///亮手牌设置请求
    /// </summary>
    [pbr::OriginalName("CmdShowHandsReq")] CmdShowHandsReq = 13,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CmdShowHandsResp")] CmdShowHandsResp = 14,
    /// <summary>
    ///请求购买保险(insurance)
    /// </summary>
    [pbr::OriginalName("CmdBuyInsReq")] CmdBuyInsReq = 15,
    /// <summary>
    ///回复购买保险
    /// </summary>
    [pbr::OriginalName("CmdBuyInsResp")] CmdBuyInsResp = 16,
    /// <summary>
    ///设置离开状态
    /// </summary>
    [pbr::OriginalName("CmdSetLeaveStatusReq")] CmdSetLeaveStatusReq = 17,
    /// <summary>
    ///回复离开状态
    /// </summary>
    [pbr::OriginalName("CmdSetLeaveStatusResp")] CmdSetLeaveStatusResp = 18,
    /// <summary>
    /// 请求牌局历史
    /// </summary>
    [pbr::OriginalName("CmdHandHistoryReq")] CmdHandHistoryReq = 19,
    /// <summary>
    /// 响应牌局历史
    /// </summary>
    [pbr::OriginalName("CmdHandHistoryResp")] CmdHandHistoryResp = 20,
    /// <summary>
    /// 请求玩家获取旁观者列表
    /// </summary>
    [pbr::OriginalName("CmdGetOnlookerListReq")] CmdGetOnlookerListReq = 21,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CmdGetOnlookerListResp")] CmdGetOnlookerListResp = 22,
    /// <summary>
    /// 请求看公共牌 
    /// </summary>
    [pbr::OriginalName("CmdShowPublicCardsReq")] CmdShowPublicCardsReq = 23,
    [pbr::OriginalName("CmdShowPublicCardsResp")] CmdShowPublicCardsResp = 24,
    /// <summary>
    /// 请求看所有人手牌 
    /// </summary>
    [pbr::OriginalName("CmdShowAllHandsReq")] CmdShowAllHandsReq = 25,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CmdShowAllHandsResp")] CmdShowAllHandsResp = 26,
    /// <summary>
    /// 请求房间费明细
    /// </summary>
    [pbr::OriginalName("CmdGetRoomFeeReq")] CmdGetRoomFeeReq = 27,
    /// <summary>
    /// GetRoomFeeResp
    /// </summary>
    [pbr::OriginalName("CmdGetRoomFeeResp")] CmdGetRoomFeeResp = 28,
    /// <summary>
    ///请求加时
    /// </summary>
    [pbr::OriginalName("CmdExtendTimeReq")] CmdExtendTimeReq = 29,
    /// <summary>
    ///加时回复
    /// </summary>
    [pbr::OriginalName("CmdExtendTimeResp")] CmdExtendTimeResp = 30,
    /// <summary>
    /// 收藏历史手牌
    /// </summary>
    [pbr::OriginalName("CmdKeepHistoryHandReq")] CmdKeepHistoryHandReq = 31,
    [pbr::OriginalName("CmdKeepHistoryHandResp")] CmdKeepHistoryHandResp = 32,
    /// <summary>
    ///获取当前的积分(已撤回的筹码)
    /// </summary>
    [pbr::OriginalName("CmdGetPointsReq")] CmdGetPointsReq = 33,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CmdGetPointsResp")] CmdGetPointsResp = 34,
    /// <summary>
    ///加载积分( 已撤回的筹码 转换成 筹码)
    /// </summary>
    [pbr::OriginalName("CmdLoadPoinstReq")] CmdLoadPoinstReq = 35,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CmdLoadPointsResp")] CmdLoadPointsResp = 36,
    /// <summary>
    ///Server主动通知相关
    /// </summary>
    [pbr::OriginalName("CmdLoginPush")] CmdLoginPush = 4097,
    /// <summary>
    ///通知某玩家离开房间
    /// </summary>
    [pbr::OriginalName("CmdLogoutPush")] CmdLogoutPush = 4098,
    /// <summary>
    ///通知玩家坐下信息
    /// </summary>
    [pbr::OriginalName("CmdSitdownPush")] CmdSitdownPush = 4099,
    /// <summary>
    ///通知玩家站起
    /// </summary>
    [pbr::OriginalName("CmdStandupPush")] CmdStandupPush = 4100,
    /// <summary>
    ///游戏准备开始倒计时
    /// </summary>
    [pbr::OriginalName("CmdGameReadyPush")] CmdGameReadyPush = 4101,
    /// <summary>
    ///游戏开始,确定button与发手牌
    /// </summary>
    [pbr::OriginalName("CmdGameStartPush")] CmdGameStartPush = 4102,
    /// <summary>
    ///通知所有玩家下前注的信息
    /// </summary>
    [pbr::OriginalName("CmdAntePush")] CmdAntePush = 4103,
    /// <summary>
    ///发玩家手牌
    /// </summary>
    [pbr::OriginalName("CmdDealPush")] CmdDealPush = 4104,
    /// <summary>
    ///通知玩家开始行动
    /// </summary>
    [pbr::OriginalName("CmdStartActionPush")] CmdStartActionPush = 4105,
    /// <summary>
    ///玩家下注通知
    /// </summary>
    [pbr::OriginalName("CmdActionPush")] CmdActionPush = 4106,
    /// <summary>
    ///系统将多余的筹码返回给玩家
    /// </summary>
    [pbr::OriginalName("CmdRefundPush")] CmdRefundPush = 4107,
    /// <summary>
    ///回合结束,通知奖池变化
    /// </summary>
    [pbr::OriginalName("CmdRoundEndPush")] CmdRoundEndPush = 4108,
    /// <summary>
    ///发翻牌
    /// </summary>
    [pbr::OriginalName("CmdFlopPush")] CmdFlopPush = 4109,
    /// <summary>
    ///发转牌
    /// </summary>
    [pbr::OriginalName("CmdTurnPush")] CmdTurnPush = 4110,
    /// <summary>
    ///发河牌
    /// </summary>
    [pbr::OriginalName("CmdRiverPush")] CmdRiverPush = 4111,
    /// <summary>
    ///游戏结束结算信息
    /// </summary>
    [pbr::OriginalName("CmdGameOverPush")] CmdGameOverPush = 4112,
    /// <summary>
    ///亮牌通知
    /// </summary>
    [pbr::OriginalName("CmdShowHandsPush")] CmdShowHandsPush = 4113,
    /// <summary>
    ///所有玩家Allin 提前亮手牌
    /// </summary>
    [pbr::OriginalName("CmdPreShowHandsPush")] CmdPreShowHandsPush = 4114,
    /// <summary>
    ///玩家买入筹码到帐通知
    /// </summary>
    [pbr::OriginalName("CmdBuyinPush")] CmdBuyinPush = 4115,
    /// <summary>
    ///通知玩家进入保险模式
    /// </summary>
    [pbr::OriginalName("CmdEnterInsPush")] CmdEnterInsPush = 4116,
    /// <summary>
    ///通知某玩家开始购买保险
    /// </summary>
    [pbr::OriginalName("CmdStartBuyInsPush")] CmdStartBuyInsPush = 4117,
    /// <summary>
    ///通知玩家购买保险操作
    /// </summary>
    [pbr::OriginalName("CmdBuyInsPush")] CmdBuyInsPush = 4118,
    /// <summary>
    ///通知爆保险时的赔付信息
    /// </summary>
    [pbr::OriginalName("CmdPayInsPush")] CmdPayInsPush = 4119,
    /// <summary>
    ///不触发保险通知
    /// </summary>
    [pbr::OriginalName("CmdDisableInsPush")] CmdDisableInsPush = 4120,
    /// <summary>
    ///推送离开状态
    /// </summary>
    [pbr::OriginalName("CmdSetLeaveStatusPush")] CmdSetLeaveStatusPush = 4121,
    /// <summary>
    ///通知玩家可以执行看公共牌操作
    /// </summary>
    [pbr::OriginalName("CmdCanShowPublicCardsPush")] CmdCanShowPublicCardsPush = 4122,
    /// <summary>
    ///广播房间所有人，谁看了公共牌
    /// </summary>
    [pbr::OriginalName("CmdWhoShowPublicCardsPush")] CmdWhoShowPublicCardsPush = 4123,
    /// <summary>
    ///通知玩家可以执行看所有人手牌操作
    /// </summary>
    [pbr::OriginalName("CmdCanShowAllHandsPush")] CmdCanShowAllHandsPush = 4124,
    /// <summary>
    /// 通知玩家买入倒计时
    /// </summary>
    [pbr::OriginalName("CmdBuyInCountdownPush")] CmdBuyInCountdownPush = 4125,
    /// <summary>
    ///通知某玩家加时操作
    /// </summary>
    [pbr::OriginalName("CmdExtendTimePush")] CmdExtendTimePush = 4126,
    /// <summary>
    /// 牌局内刷新 Lucky Card 推送
    /// </summary>
    [pbr::OriginalName("CmdLuckyCardPush")] CmdLuckyCardPush = 4127,
    /// <summary>
    ///某玩家的积分变化
    /// </summary>
    [pbr::OriginalName("CmdPointChangePush")] CmdPointChangePush = 4128,
  }

  /// <summary>
  ///对应matchMgr.proto 客户端与服务器的交互
  /// xxReq: 客户端请求
  /// xxResp: 服务器回复客户端请求 
  /// xxPush: 服务器通知客户端
  /// </summary>
  public enum MatchMgr {
    /// <summary>
    ///获取创建比赛的配置信息
    /// </summary>
    [pbr::OriginalName("getMatchConfigReq")] GetMatchConfigReq = 1,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("getMatchConfigResp")] GetMatchConfigResp = 2,
    /// <summary>
    ///请求创建比赛
    /// </summary>
    [pbr::OriginalName("createMatchReq")] CreateMatchReq = 3,
    [pbr::OriginalName("createMatchResp")] CreateMatchResp = 4,
    /// <summary>
    ///根据(私局)房间号码获取比赛信息
    /// </summary>
    [pbr::OriginalName("searchMatchReq")] SearchMatchReq = 5,
    [pbr::OriginalName("searchMatchResp")] SearchMatchResp = 6,
    /// <summary>
    ///获取牌局列表信息
    /// </summary>
    [pbr::OriginalName("getMatchListReq")] GetMatchListReq = 7,
    [pbr::OriginalName("getMatchListResp")] GetMatchListResp = 8,
    /// <summary>
    ///比赛的盈亏信息(战绩信息、买入历史)
    /// </summary>
    [pbr::OriginalName("matchBalanceReq")] MatchBalanceReq = 9,
    [pbr::OriginalName("matchBalanceResp")] MatchBalanceResp = 10,
    /// <summary>
    ///买入筹码
    /// </summary>
    [pbr::OriginalName("buyinReq")] BuyinReq = 11,
    [pbr::OriginalName("buyinResp")] BuyinResp = 12,
    /// <summary>
    ///解散比赛
    /// </summary>
    [pbr::OriginalName("closeMatchReq")] CloseMatchReq = 13,
    [pbr::OriginalName("closeMatchResp")] CloseMatchResp = 14,
    /// <summary>
    /// 获取俱乐部在联盟的实时数据
    /// </summary>
    [pbr::OriginalName("getRealtimeDataReq")] GetRealtimeDataReq = 15,
    [pbr::OriginalName("getRealtimeDataResp")] GetRealtimeDataResp = 16,
    /// <summary>
    ///比赛开始请求
    /// </summary>
    [pbr::OriginalName("startMatchReq")] StartMatchReq = 17,
    [pbr::OriginalName("startMatchResp")] StartMatchResp = 18,
    /// <summary>
    ///获取提前结算明细
    /// </summary>
    [pbr::OriginalName("settlementDeTailReq")] SettlementDeTailReq = 19,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("settlementDeTailResp")] SettlementDeTailResp = 20,
    /// <summary>
    ///提前结算请求
    /// </summary>
    [pbr::OriginalName("settlementReq")] SettlementReq = 21,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("settlementResp")] SettlementResp = 22,
    /// <summary>
    /// 检查用户在该牌局提前结算是否需要扣除盈利（入池标准桌使用）
    /// </summary>
    [pbr::OriginalName("checkPenaltyReq")] CheckPenaltyReq = 23,
    [pbr::OriginalName("checkPenaltyResp")] CheckPenaltyResp = 24,
    /// <summary>
    ///Server主动通知相关
    /// </summary>
    [pbr::OriginalName("matchOverPush")] MatchOverPush = 4097,
    /// <summary>
    ///真正提前结算通知玩家的结算结果
    /// </summary>
    [pbr::OriginalName("settlementPush")] SettlementPush = 4098,
    /// <summary>
    ///房主解散比赛通知比赛的其它玩家
    /// </summary>
    [pbr::OriginalName("closeMatchPush")] CloseMatchPush = 4099,
    /// <summary>
    ///比赛结束倒计时提醒
    /// </summary>
    [pbr::OriginalName("closeMatchRemindPush")] CloseMatchRemindPush = 4100,
    /// <summary>
    /// 通知所有玩家比赛开始
    /// </summary>
    [pbr::OriginalName("startMatchPush")] StartMatchPush = 4101,
  }

  #endregion

  #region Messages
  public sealed partial class PBHeader : pb::IMessage<PBHeader> {
    private static readonly pb::MessageParser<PBHeader> _parser = new pb::MessageParser<PBHeader>(() => new PBHeader());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbcmd.CmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBHeader(PBHeader other) : this() {
      _hasBits0 = other._hasBits0;
      mainCmd_ = other.mainCmd_;
      subCmd_ = other.subCmd_;
      encrypt_ = other.encrypt_;
      clientCtx_ = other.clientCtx_;
      idx_ = other.idx_ != null ? other.idx_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBHeader Clone() {
      return new PBHeader(this);
    }

    /// <summary>Field number for the "mainCmd" field.</summary>
    public const int MainCmdFieldNumber = 1;
    private readonly static uint MainCmdDefaultValue = 0;

    private uint mainCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MainCmd {
      get { if ((_hasBits0 & 1) != 0) { return mainCmd_; } else { return MainCmdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mainCmd_ = value;
      }
    }
    /// <summary>Gets whether the "mainCmd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMainCmd {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mainCmd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMainCmd() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "subCmd" field.</summary>
    public const int SubCmdFieldNumber = 2;
    private readonly static uint SubCmdDefaultValue = 0;

    private uint subCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubCmd {
      get { if ((_hasBits0 & 2) != 0) { return subCmd_; } else { return SubCmdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        subCmd_ = value;
      }
    }
    /// <summary>Gets whether the "subCmd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubCmd {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "subCmd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubCmd() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "encrypt" field.</summary>
    public const int EncryptFieldNumber = 3;
    private readonly static uint EncryptDefaultValue = 0;

    private uint encrypt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Encrypt {
      get { if ((_hasBits0 & 4) != 0) { return encrypt_; } else { return EncryptDefaultValue; } }
      set {
        _hasBits0 |= 4;
        encrypt_ = value;
      }
    }
    /// <summary>Gets whether the "encrypt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncrypt {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "encrypt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncrypt() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "clientCtx" field.</summary>
    public const int ClientCtxFieldNumber = 4;
    private readonly static uint ClientCtxDefaultValue = 0;

    private uint clientCtx_;
    /// <summary>
    ///原样返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientCtx {
      get { if ((_hasBits0 & 8) != 0) { return clientCtx_; } else { return ClientCtxDefaultValue; } }
      set {
        _hasBits0 |= 8;
        clientCtx_ = value;
      }
    }
    /// <summary>Gets whether the "clientCtx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientCtx {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "clientCtx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientCtx() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 5;
    private global::Pbcmd.PBMatchIndex idx_;
    /// <summary>
    ///SVR专用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbcmd.PBMatchIndex Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MainCmd != other.MainCmd) return false;
      if (SubCmd != other.SubCmd) return false;
      if (Encrypt != other.Encrypt) return false;
      if (ClientCtx != other.ClientCtx) return false;
      if (!object.Equals(Idx, other.Idx)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMainCmd) hash ^= MainCmd.GetHashCode();
      if (HasSubCmd) hash ^= SubCmd.GetHashCode();
      if (HasEncrypt) hash ^= Encrypt.GetHashCode();
      if (HasClientCtx) hash ^= ClientCtx.GetHashCode();
      if (idx_ != null) hash ^= Idx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMainCmd) {
        output.WriteRawTag(8);
        output.WriteUInt32(MainCmd);
      }
      if (HasSubCmd) {
        output.WriteRawTag(16);
        output.WriteUInt32(SubCmd);
      }
      if (HasEncrypt) {
        output.WriteRawTag(24);
        output.WriteUInt32(Encrypt);
      }
      if (HasClientCtx) {
        output.WriteRawTag(32);
        output.WriteUInt32(ClientCtx);
      }
      if (idx_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMainCmd) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MainCmd);
      }
      if (HasSubCmd) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubCmd);
      }
      if (HasEncrypt) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Encrypt);
      }
      if (HasClientCtx) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientCtx);
      }
      if (idx_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Idx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBHeader other) {
      if (other == null) {
        return;
      }
      if (other.HasMainCmd) {
        MainCmd = other.MainCmd;
      }
      if (other.HasSubCmd) {
        SubCmd = other.SubCmd;
      }
      if (other.HasEncrypt) {
        Encrypt = other.Encrypt;
      }
      if (other.HasClientCtx) {
        ClientCtx = other.ClientCtx;
      }
      if (other.idx_ != null) {
        if (idx_ == null) {
          Idx = new global::Pbcmd.PBMatchIndex();
        }
        Idx.MergeFrom(other.Idx);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MainCmd = input.ReadUInt32();
            break;
          }
          case 16: {
            SubCmd = input.ReadUInt32();
            break;
          }
          case 24: {
            Encrypt = input.ReadUInt32();
            break;
          }
          case 32: {
            ClientCtx = input.ReadUInt32();
            break;
          }
          case 42: {
            if (idx_ == null) {
              Idx = new global::Pbcmd.PBMatchIndex();
            }
            input.ReadMessage(Idx);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 比赛索引结构体
  /// </summary>
  public sealed partial class PBMatchIndex : pb::IMessage<PBMatchIndex> {
    private static readonly pb::MessageParser<PBMatchIndex> _parser = new pb::MessageParser<PBMatchIndex>(() => new PBMatchIndex());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBMatchIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbcmd.CmdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBMatchIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBMatchIndex(PBMatchIndex other) : this() {
      _hasBits0 = other._hasBits0;
      svrID_ = other.svrID_;
      matchID_ = other.matchID_;
      gameType_ = other.gameType_;
      kind_ = other.kind_;
      tid_ = other.tid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBMatchIndex Clone() {
      return new PBMatchIndex(this);
    }

    /// <summary>Field number for the "svrID" field.</summary>
    public const int SvrIDFieldNumber = 1;
    private readonly static uint SvrIDDefaultValue = 0;

    private uint svrID_;
    /// <summary>
    /// 服务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SvrID {
      get { if ((_hasBits0 & 1) != 0) { return svrID_; } else { return SvrIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        svrID_ = value;
      }
    }
    /// <summary>Gets whether the "svrID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSvrID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "svrID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSvrID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "matchID" field.</summary>
    public const int MatchIDFieldNumber = 2;
    private readonly static uint MatchIDDefaultValue = 0;

    private uint matchID_;
    /// <summary>
    /// 比赛ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchID {
      get { if ((_hasBits0 & 2) != 0) { return matchID_; } else { return MatchIDDefaultValue; } }
      set {
        _hasBits0 |= 2;
        matchID_ = value;
      }
    }
    /// <summary>Gets whether the "matchID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMatchID {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "matchID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMatchID() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "gameType" field.</summary>
    public const int GameTypeFieldNumber = 3;
    private readonly static uint GameTypeDefaultValue = 0;

    private uint gameType_;
    /// <summary>
    /// 游戏类型，区分不同游戏 common.proto PBMatchType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameType {
      get { if ((_hasBits0 & 4) != 0) { return gameType_; } else { return GameTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        gameType_ = value;
      }
    }
    /// <summary>Gets whether the "gameType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGameType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "gameType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGameType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 4;
    private readonly static uint KindDefaultValue = 0;

    private uint kind_;
    /// <summary>
    /// 玩法类型，1-德州，2-短牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kind {
      get { if ((_hasBits0 & 8) != 0) { return kind_; } else { return KindDefaultValue; } }
      set {
        _hasBits0 |= 8;
        kind_ = value;
      }
    }
    /// <summary>Gets whether the "kind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKind {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "kind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKind() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 5;
    private readonly static uint TidDefaultValue = 0;

    private uint tid_;
    /// <summary>
    /// 桌子id(新的玩牌逻辑)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { if ((_hasBits0 & 16) != 0) { return tid_; } else { return TidDefaultValue; } }
      set {
        _hasBits0 |= 16;
        tid_ = value;
      }
    }
    /// <summary>Gets whether the "tid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTid {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "tid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTid() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBMatchIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBMatchIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SvrID != other.SvrID) return false;
      if (MatchID != other.MatchID) return false;
      if (GameType != other.GameType) return false;
      if (Kind != other.Kind) return false;
      if (Tid != other.Tid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSvrID) hash ^= SvrID.GetHashCode();
      if (HasMatchID) hash ^= MatchID.GetHashCode();
      if (HasGameType) hash ^= GameType.GetHashCode();
      if (HasKind) hash ^= Kind.GetHashCode();
      if (HasTid) hash ^= Tid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSvrID) {
        output.WriteRawTag(8);
        output.WriteUInt32(SvrID);
      }
      if (HasMatchID) {
        output.WriteRawTag(16);
        output.WriteUInt32(MatchID);
      }
      if (HasGameType) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameType);
      }
      if (HasKind) {
        output.WriteRawTag(32);
        output.WriteUInt32(Kind);
      }
      if (HasTid) {
        output.WriteRawTag(40);
        output.WriteUInt32(Tid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSvrID) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SvrID);
      }
      if (HasMatchID) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchID);
      }
      if (HasGameType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameType);
      }
      if (HasKind) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kind);
      }
      if (HasTid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBMatchIndex other) {
      if (other == null) {
        return;
      }
      if (other.HasSvrID) {
        SvrID = other.SvrID;
      }
      if (other.HasMatchID) {
        MatchID = other.MatchID;
      }
      if (other.HasGameType) {
        GameType = other.GameType;
      }
      if (other.HasKind) {
        Kind = other.Kind;
      }
      if (other.HasTid) {
        Tid = other.Tid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SvrID = input.ReadUInt32();
            break;
          }
          case 16: {
            MatchID = input.ReadUInt32();
            break;
          }
          case 24: {
            GameType = input.ReadUInt32();
            break;
          }
          case 32: {
            Kind = input.ReadUInt32();
            break;
          }
          case 40: {
            Tid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公共请求参数
  /// </summary>
  public sealed partial class PBCommParam : pb::IMessage<PBCommParam> {
    private static readonly pb::MessageParser<PBCommParam> _parser = new pb::MessageParser<PBCommParam>(() => new PBCommParam());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBCommParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbcmd.CmdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBCommParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBCommParam(PBCommParam other) : this() {
      _hasBits0 = other._hasBits0;
      cid_ = other.cid_;
      uid_ = other.uid_;
      token_ = other.token_;
      version_ = other.version_;
      channel_ = other.channel_;
      lang_ = other.lang_;
      device_ = other.device_ != null ? other.device_.Clone() : null;
      pkgName_ = other.pkgName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBCommParam Clone() {
      return new PBCommParam(this);
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 1;
    private readonly static uint CidDefaultValue = 0;

    private uint cid_;
    /// <summary>
    ///客户端编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cid {
      get { if ((_hasBits0 & 1) != 0) { return cid_; } else { return CidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cid_ = value;
      }
    }
    /// <summary>Gets whether the "cid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static uint UidDefaultValue = 0;

    private uint uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { if ((_hasBits0 & 2) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private readonly static string TokenDefaultValue = "";

    private string token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_ ?? TokenDefaultValue; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "token" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToken {
      get { return token_ != null; }
    }
    /// <summary>Clears the value of the "token" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToken() {
      token_ = null;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private readonly static string VersionDefaultValue = "";

    private string version_;
    /// <summary>
    ///客户端版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_ ?? VersionDefaultValue; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersion {
      get { return version_ != null; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersion() {
      version_ = null;
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 5;
    private readonly static uint ChannelDefaultValue = 0;

    private uint channel_;
    /// <summary>
    ///子渠道号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Channel {
      get { if ((_hasBits0 & 4) != 0) { return channel_; } else { return ChannelDefaultValue; } }
      set {
        _hasBits0 |= 4;
        channel_ = value;
      }
    }
    /// <summary>Gets whether the "channel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChannel {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "channel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannel() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 6;
    private readonly static uint LangDefaultValue = 0;

    private uint lang_;
    /// <summary>
    ///客户端语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lang {
      get { if ((_hasBits0 & 8) != 0) { return lang_; } else { return LangDefaultValue; } }
      set {
        _hasBits0 |= 8;
        lang_ = value;
      }
    }
    /// <summary>Gets whether the "lang" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLang {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "lang" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLang() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 7;
    private global::Pbcmd.PBDeviceInfo device_;
    /// <summary>
    ///设备信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbcmd.PBDeviceInfo Device {
      get { return device_; }
      set {
        device_ = value;
      }
    }

    /// <summary>Field number for the "pkgName" field.</summary>
    public const int PkgNameFieldNumber = 8;
    private readonly static string PkgNameDefaultValue = "";

    private string pkgName_;
    /// <summary>
    ///包名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PkgName {
      get { return pkgName_ ?? PkgNameDefaultValue; }
      set {
        pkgName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pkgName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPkgName {
      get { return pkgName_ != null; }
    }
    /// <summary>Clears the value of the "pkgName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPkgName() {
      pkgName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBCommParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBCommParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cid != other.Cid) return false;
      if (Uid != other.Uid) return false;
      if (Token != other.Token) return false;
      if (Version != other.Version) return false;
      if (Channel != other.Channel) return false;
      if (Lang != other.Lang) return false;
      if (!object.Equals(Device, other.Device)) return false;
      if (PkgName != other.PkgName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCid) hash ^= Cid.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasToken) hash ^= Token.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      if (HasChannel) hash ^= Channel.GetHashCode();
      if (HasLang) hash ^= Lang.GetHashCode();
      if (device_ != null) hash ^= Device.GetHashCode();
      if (HasPkgName) hash ^= PkgName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCid) {
        output.WriteRawTag(8);
        output.WriteUInt32(Cid);
      }
      if (HasUid) {
        output.WriteRawTag(16);
        output.WriteUInt32(Uid);
      }
      if (HasToken) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (HasVersion) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (HasChannel) {
        output.WriteRawTag(40);
        output.WriteUInt32(Channel);
      }
      if (HasLang) {
        output.WriteRawTag(48);
        output.WriteUInt32(Lang);
      }
      if (device_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Device);
      }
      if (HasPkgName) {
        output.WriteRawTag(66);
        output.WriteString(PkgName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cid);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      if (HasToken) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (HasVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (HasChannel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
      }
      if (HasLang) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lang);
      }
      if (device_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
      }
      if (HasPkgName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PkgName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBCommParam other) {
      if (other == null) {
        return;
      }
      if (other.HasCid) {
        Cid = other.Cid;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasToken) {
        Token = other.Token;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasChannel) {
        Channel = other.Channel;
      }
      if (other.HasLang) {
        Lang = other.Lang;
      }
      if (other.device_ != null) {
        if (device_ == null) {
          Device = new global::Pbcmd.PBDeviceInfo();
        }
        Device.MergeFrom(other.Device);
      }
      if (other.HasPkgName) {
        PkgName = other.PkgName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cid = input.ReadUInt32();
            break;
          }
          case 16: {
            Uid = input.ReadUInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 40: {
            Channel = input.ReadUInt32();
            break;
          }
          case 48: {
            Lang = input.ReadUInt32();
            break;
          }
          case 58: {
            if (device_ == null) {
              Device = new global::Pbcmd.PBDeviceInfo();
            }
            input.ReadMessage(Device);
            break;
          }
          case 66: {
            PkgName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PBDeviceInfo : pb::IMessage<PBDeviceInfo> {
    private static readonly pb::MessageParser<PBDeviceInfo> _parser = new pb::MessageParser<PBDeviceInfo>(() => new PBDeviceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBDeviceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbcmd.CmdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBDeviceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBDeviceInfo(PBDeviceInfo other) : this() {
      network_ = other.network_;
      osType_ = other.osType_;
      osVersion_ = other.osVersion_;
      deviceType_ = other.deviceType_;
      imei_ = other.imei_;
      macAddr_ = other.macAddr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBDeviceInfo Clone() {
      return new PBDeviceInfo(this);
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 1;
    private readonly static string NetworkDefaultValue = "";

    private string network_;
    /// <summary>
    ///网络类型(wifi, gsm, 4G)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Network {
      get { return network_ ?? NetworkDefaultValue; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "network" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNetwork {
      get { return network_ != null; }
    }
    /// <summary>Clears the value of the "network" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNetwork() {
      network_ = null;
    }

    /// <summary>Field number for the "osType" field.</summary>
    public const int OsTypeFieldNumber = 2;
    private readonly static string OsTypeDefaultValue = "";

    private string osType_;
    /// <summary>
    ///系统类型(IOS, Android)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsType {
      get { return osType_ ?? OsTypeDefaultValue; }
      set {
        osType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "osType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOsType {
      get { return osType_ != null; }
    }
    /// <summary>Clears the value of the "osType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOsType() {
      osType_ = null;
    }

    /// <summary>Field number for the "osVersion" field.</summary>
    public const int OsVersionFieldNumber = 3;
    private readonly static string OsVersionDefaultValue = "";

    private string osVersion_;
    /// <summary>
    ///系统版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsVersion {
      get { return osVersion_ ?? OsVersionDefaultValue; }
      set {
        osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "osVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOsVersion {
      get { return osVersion_ != null; }
    }
    /// <summary>Clears the value of the "osVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOsVersion() {
      osVersion_ = null;
    }

    /// <summary>Field number for the "deviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 4;
    private readonly static string DeviceTypeDefaultValue = "";

    private string deviceType_;
    /// <summary>
    ///设备型号(HUAWEI Mate20 ...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceType {
      get { return deviceType_ ?? DeviceTypeDefaultValue; }
      set {
        deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "deviceType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeviceType {
      get { return deviceType_ != null; }
    }
    /// <summary>Clears the value of the "deviceType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeviceType() {
      deviceType_ = null;
    }

    /// <summary>Field number for the "imei" field.</summary>
    public const int ImeiFieldNumber = 5;
    private readonly static string ImeiDefaultValue = "";

    private string imei_;
    /// <summary>
    ///设备IMEI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imei {
      get { return imei_ ?? ImeiDefaultValue; }
      set {
        imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "imei" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasImei {
      get { return imei_ != null; }
    }
    /// <summary>Clears the value of the "imei" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearImei() {
      imei_ = null;
    }

    /// <summary>Field number for the "macAddr" field.</summary>
    public const int MacAddrFieldNumber = 6;
    private readonly static string MacAddrDefaultValue = "";

    private string macAddr_;
    /// <summary>
    ///MAC地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MacAddr {
      get { return macAddr_ ?? MacAddrDefaultValue; }
      set {
        macAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "macAddr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMacAddr {
      get { return macAddr_ != null; }
    }
    /// <summary>Clears the value of the "macAddr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMacAddr() {
      macAddr_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBDeviceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBDeviceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Network != other.Network) return false;
      if (OsType != other.OsType) return false;
      if (OsVersion != other.OsVersion) return false;
      if (DeviceType != other.DeviceType) return false;
      if (Imei != other.Imei) return false;
      if (MacAddr != other.MacAddr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNetwork) hash ^= Network.GetHashCode();
      if (HasOsType) hash ^= OsType.GetHashCode();
      if (HasOsVersion) hash ^= OsVersion.GetHashCode();
      if (HasDeviceType) hash ^= DeviceType.GetHashCode();
      if (HasImei) hash ^= Imei.GetHashCode();
      if (HasMacAddr) hash ^= MacAddr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasNetwork) {
        output.WriteRawTag(10);
        output.WriteString(Network);
      }
      if (HasOsType) {
        output.WriteRawTag(18);
        output.WriteString(OsType);
      }
      if (HasOsVersion) {
        output.WriteRawTag(26);
        output.WriteString(OsVersion);
      }
      if (HasDeviceType) {
        output.WriteRawTag(34);
        output.WriteString(DeviceType);
      }
      if (HasImei) {
        output.WriteRawTag(42);
        output.WriteString(Imei);
      }
      if (HasMacAddr) {
        output.WriteRawTag(50);
        output.WriteString(MacAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNetwork) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Network);
      }
      if (HasOsType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsType);
      }
      if (HasOsVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
      }
      if (HasDeviceType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
      }
      if (HasImei) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
      }
      if (HasMacAddr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBDeviceInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasNetwork) {
        Network = other.Network;
      }
      if (other.HasOsType) {
        OsType = other.OsType;
      }
      if (other.HasOsVersion) {
        OsVersion = other.OsVersion;
      }
      if (other.HasDeviceType) {
        DeviceType = other.DeviceType;
      }
      if (other.HasImei) {
        Imei = other.Imei;
      }
      if (other.HasMacAddr) {
        MacAddr = other.MacAddr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Network = input.ReadString();
            break;
          }
          case 18: {
            OsType = input.ReadString();
            break;
          }
          case 26: {
            OsVersion = input.ReadString();
            break;
          }
          case 34: {
            DeviceType = input.ReadString();
            break;
          }
          case 42: {
            Imei = input.ReadString();
            break;
          }
          case 50: {
            MacAddr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PBCommResult : pb::IMessage<PBCommResult> {
    private static readonly pb::MessageParser<PBCommResult> _parser = new pb::MessageParser<PBCommResult>(() => new PBCommResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBCommResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbcmd.CmdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBCommResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBCommResult(PBCommResult other) : this() {
      _hasBits0 = other._hasBits0;
      code_ = other.code_;
      desc_ = other.desc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBCommResult Clone() {
      return new PBCommResult(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private readonly static int CodeDefaultValue = 0;

    private int code_;
    /// <summary>
    /// 结果码,值为1成功,其他值失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        code_ = value;
      }
    }
    /// <summary>Gets whether the "code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 2;
    private readonly static string DescDefaultValue = "";

    private string desc_;
    /// <summary>
    /// 备用,比如对code描述或返回调试用的信息等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_ ?? DescDefaultValue; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "desc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDesc {
      get { return desc_ != null; }
    }
    /// <summary>Clears the value of the "desc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDesc() {
      desc_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBCommResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBCommResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Desc != other.Desc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCode) hash ^= Code.GetHashCode();
      if (HasDesc) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCode) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (HasDesc) {
        output.WriteRawTag(18);
        output.WriteString(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (HasDesc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBCommResult other) {
      if (other == null) {
        return;
      }
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PBHearBeat : pb::IMessage<PBHearBeat> {
    private static readonly pb::MessageParser<PBHearBeat> _parser = new pb::MessageParser<PBHearBeat>(() => new PBHearBeat());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBHearBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbcmd.CmdReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBHearBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBHearBeat(PBHearBeat other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBHearBeat Clone() {
      return new PBHearBeat(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static ulong TimestampDefaultValue = 0UL;

    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBHearBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBHearBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBHearBeat other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	main        MCmd_Access			= 0x1001;	//用于接入服
  ///  subcmd  	ServiceNotFound		= 0x0001;
  /// </summary>
  public sealed partial class PBServiceNotFound : pb::IMessage<PBServiceNotFound> {
    private static readonly pb::MessageParser<PBServiceNotFound> _parser = new pb::MessageParser<PBServiceNotFound>(() => new PBServiceNotFound());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBServiceNotFound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbcmd.CmdReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBServiceNotFound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBServiceNotFound(PBServiceNotFound other) : this() {
      _hasBits0 = other._hasBits0;
      svrType_ = other.svrType_;
      clientCtx_ = other.clientCtx_;
      mainCmd_ = other.mainCmd_;
      subCmd_ = other.subCmd_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBServiceNotFound Clone() {
      return new PBServiceNotFound(this);
    }

    /// <summary>Field number for the "svrType" field.</summary>
    public const int SvrTypeFieldNumber = 1;
    private readonly static uint SvrTypeDefaultValue = 0;

    private uint svrType_;
    /// <summary>
    ///服务器的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SvrType {
      get { if ((_hasBits0 & 1) != 0) { return svrType_; } else { return SvrTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        svrType_ = value;
      }
    }
    /// <summary>Gets whether the "svrType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSvrType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "svrType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSvrType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "clientCtx" field.</summary>
    public const int ClientCtxFieldNumber = 2;
    private readonly static uint ClientCtxDefaultValue = 0;

    private uint clientCtx_;
    /// <summary>
    ///上下文(与客户请求头里的一致，返回的头也有)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientCtx {
      get { if ((_hasBits0 & 2) != 0) { return clientCtx_; } else { return ClientCtxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clientCtx_ = value;
      }
    }
    /// <summary>Gets whether the "clientCtx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClientCtx {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "clientCtx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClientCtx() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mainCmd" field.</summary>
    public const int MainCmdFieldNumber = 3;
    private readonly static uint MainCmdDefaultValue = 0;

    private uint mainCmd_;
    /// <summary>
    ///服务没找到的主命令字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MainCmd {
      get { if ((_hasBits0 & 4) != 0) { return mainCmd_; } else { return MainCmdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mainCmd_ = value;
      }
    }
    /// <summary>Gets whether the "mainCmd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMainCmd {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mainCmd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMainCmd() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "subCmd" field.</summary>
    public const int SubCmdFieldNumber = 4;
    private readonly static uint SubCmdDefaultValue = 0;

    private uint subCmd_;
    /// <summary>
    ///请求的子命令字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SubCmd {
      get { if ((_hasBits0 & 8) != 0) { return subCmd_; } else { return SubCmdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        subCmd_ = value;
      }
    }
    /// <summary>Gets whether the "subCmd" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubCmd {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "subCmd" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubCmd() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 5;
    private readonly static uint ReasonDefaultValue = 0;

    private uint reason_;
    /// <summary>
    ///1：服务进程不存在  2:服务进程到不到处理体(如找不到比赛，比赛已结束等)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reason {
      get { if ((_hasBits0 & 16) != 0) { return reason_; } else { return ReasonDefaultValue; } }
      set {
        _hasBits0 |= 16;
        reason_ = value;
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBServiceNotFound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBServiceNotFound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SvrType != other.SvrType) return false;
      if (ClientCtx != other.ClientCtx) return false;
      if (MainCmd != other.MainCmd) return false;
      if (SubCmd != other.SubCmd) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSvrType) hash ^= SvrType.GetHashCode();
      if (HasClientCtx) hash ^= ClientCtx.GetHashCode();
      if (HasMainCmd) hash ^= MainCmd.GetHashCode();
      if (HasSubCmd) hash ^= SubCmd.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSvrType) {
        output.WriteRawTag(8);
        output.WriteUInt32(SvrType);
      }
      if (HasClientCtx) {
        output.WriteRawTag(16);
        output.WriteUInt32(ClientCtx);
      }
      if (HasMainCmd) {
        output.WriteRawTag(24);
        output.WriteUInt32(MainCmd);
      }
      if (HasSubCmd) {
        output.WriteRawTag(32);
        output.WriteUInt32(SubCmd);
      }
      if (HasReason) {
        output.WriteRawTag(40);
        output.WriteUInt32(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSvrType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SvrType);
      }
      if (HasClientCtx) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientCtx);
      }
      if (HasMainCmd) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MainCmd);
      }
      if (HasSubCmd) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SubCmd);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBServiceNotFound other) {
      if (other == null) {
        return;
      }
      if (other.HasSvrType) {
        SvrType = other.SvrType;
      }
      if (other.HasClientCtx) {
        ClientCtx = other.ClientCtx;
      }
      if (other.HasMainCmd) {
        MainCmd = other.MainCmd;
      }
      if (other.HasSubCmd) {
        SubCmd = other.SubCmd;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SvrType = input.ReadUInt32();
            break;
          }
          case 16: {
            ClientCtx = input.ReadUInt32();
            break;
          }
          case 24: {
            MainCmd = input.ReadUInt32();
            break;
          }
          case 32: {
            SubCmd = input.ReadUInt32();
            break;
          }
          case 40: {
            Reason = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
